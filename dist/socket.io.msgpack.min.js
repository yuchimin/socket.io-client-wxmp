/*!
 * Socket.IO-WXMP v3.0.4
 * (c) 2014-2020 Guillermo Rauch
 * Released under the MIT License.
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.io=e():t.io=e()}("undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:Function("return this")(),(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=11)}([function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<r.length;o++)if((n=r[o])===e||n.fn===e){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+t],this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),n=this._callbacks["$"+t],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,e)}return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){var r=n(16),o=n(17),i=String.fromCharCode(30);t.exports={protocol:4,encodePacket:r,encodePayload:function(t,e){var n=t.length,o=new Array(n),s=0;t.forEach((function(t,c){r(t,!1,(function(t){o[c]=t,++s===n&&e(o.join(i))}))}))},decodePacket:o,decodePayload:function(t,e){for(var n=t.split(i),r=[],s=0;s<n.length;s++){var c=o(n[s],e);if(r.push(c),"error"===c.type)break}return r}}},function(t,e,n){var r=n(20),o=n(0);e.protocol=5;var i=e.PacketType={CONNECT:0,DISCONNECT:1,EVENT:2,ACK:3,CONNECT_ERROR:4},s=Number.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},c=function(t){return"string"==typeof t},a=function(t){return"[object Object]"===Object.prototype.toString.call(t)};function u(){}function f(){}u.prototype.encode=function(t){return[r.encode(t)]},o(f.prototype),f.prototype.add=function(t){var e=r.decode(t);this.checkPacket(e),this.emit("decoded",e)},f.prototype.checkPacket=function(t){if(!(s(t.type)&&t.type>=i.CONNECT&&t.type<=i.CONNECT_ERROR))throw new Error("invalid packet type");if(!c(t.nsp))throw new Error("invalid namespace");if(!function(t){switch(t.type){case i.CONNECT:return void 0===t.data||a(t.data);case i.DISCONNECT:return void 0===t.data;case i.CONNECT_ERROR:return c(t.data)||a(t.data);default:return Array.isArray(t.data)}}(t))throw new Error("invalid payload");if(!(void 0===t.id||s(t.id)))throw new Error("invalid packet id")},f.prototype.destroy=function(){},e.Encoder=u,e.Decoder=f},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");-1!=o&&-1!=i&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s,c,a=n.exec(t||""),u={},f=14;f--;)u[r[f]]=a[f]||"";return-1!=o&&-1!=i&&(u.source=e,u.host=u.host.substring(1,u.host.length-1).replace(/;/g,":"),u.authority=u.authority.replace("[","").replace("]","").replace(/;/g,":"),u.ipv6uri=!0),u.pathNames=function(t,e){var n=e.replace(/\/{2,9}/g,"/").split("/");"/"!=e.substr(0,1)&&0!==e.length||n.splice(0,1);"/"==e.substr(e.length-1,1)&&n.splice(n.length-1,1);return n}(0,u.path),u.queryKey=(s=u.query,c={},s.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,n){e&&(c[e]=n)})),c),u}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return(i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=u(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function c(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=u(t);if(e){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;var f=n(13),h=n(9),p=n(0),l=n(2),y=n(10),d=n(23),v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(v,t);var e,n,a,p=c(v);function v(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,v),(n=p.call(this)).nsps={},n.subs=[],t&&"object"===r(t)&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",n.opts=e,n.reconnection(!1!==e.reconnection),n.reconnectionAttempts(e.reconnectionAttempts||1/0),n.reconnectionDelay(e.reconnectionDelay||1e3),n.reconnectionDelayMax(e.reconnectionDelayMax||5e3),n.randomizationFactor(e.randomizationFactor||.5),n.backoff=new d({min:n.reconnectionDelay(),max:n.reconnectionDelayMax(),jitter:n.randomizationFactor()}),n.timeout(null==e.timeout?2e4:e.timeout),n._readyState="closed",n.uri=t;var o=e.parser||l;return n.encoder=new o.Encoder,n.decoder=new o.Decoder,n._autoConnect=!1!==e.autoConnect,n._autoConnect&&n.open(),n}return e=v,(n=[{key:"reconnection",value:function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}},{key:"reconnectionAttempts",value:function(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}},{key:"reconnectionDelay",value:function(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}},{key:"randomizationFactor",value:function(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}},{key:"reconnectionDelayMax",value:function(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}},{key:"timeout",value:function(t){return arguments.length?(this._timeout=t,this):this._timeout}},{key:"maybeReconnectOnOpen",value:function(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}},{key:"open",value:function(t){var e=this;if(~this._readyState.indexOf("open"))return this;this.engine=f(this.uri,this.opts);var n=this.engine,r=this;this._readyState="opening",this.skipReconnect=!1;var o=y.on(n,"open",(function(){r.onopen(),t&&t()})),s=y.on(n,"error",(function(n){r.cleanup(),r._readyState="closed",i(u(v.prototype),"emit",e).call(e,"error",n),t?t(n):r.maybeReconnectOnOpen()}));if(!1!==this._timeout){var c=this._timeout;0===c&&o();var a=setTimeout((function(){o(),n.close(),n.emit("error",new Error("timeout"))}),c);this.subs.push((function(){clearTimeout(a)}))}return this.subs.push(o),this.subs.push(s),this}},{key:"connect",value:function(t){return this.open(t)}},{key:"onopen",value:function(){this.cleanup(),this._readyState="open",i(u(v.prototype),"emit",this).call(this,"open");var t=this.engine;this.subs.push(y.on(t,"ping",this.onping.bind(this)),y.on(t,"data",this.ondata.bind(this)),y.on(t,"error",this.onerror.bind(this)),y.on(t,"close",this.onclose.bind(this)),y.on(this.decoder,"decoded",this.ondecoded.bind(this)))}},{key:"onping",value:function(){i(u(v.prototype),"emit",this).call(this,"ping")}},{key:"ondata",value:function(t){this.decoder.add(t)}},{key:"ondecoded",value:function(t){i(u(v.prototype),"emit",this).call(this,"packet",t)}},{key:"onerror",value:function(t){i(u(v.prototype),"emit",this).call(this,"error",t)}},{key:"socket",value:function(t,e){var n=this.nsps[t];return n||(n=new h.Socket(this,t,e),this.nsps[t]=n),n}},{key:"_destroy",value:function(t){for(var e=0,n=Object.keys(this.nsps);e<n.length;e++){var r=n[e];if(this.nsps[r].active)return}this._close()}},{key:"_packet",value:function(t){t.query&&0===t.type&&(t.nsp+="?"+t.query);for(var e=this.encoder.encode(t),n=0;n<e.length;n++)this.engine.write(e[n],t.options)}},{key:"cleanup",value:function(){this.subs.forEach((function(t){return t()})),this.subs.length=0,this.decoder.destroy()}},{key:"_close",value:function(){this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}},{key:"disconnect",value:function(){return this._close()}},{key:"onclose",value:function(t){this.cleanup(),this.backoff.reset(),this._readyState="closed",i(u(v.prototype),"emit",this).call(this,"close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}},{key:"reconnect",value:function(){var t=this;if(this._reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),i(u(v.prototype),"emit",this).call(this,"reconnect_failed"),this._reconnecting=!1;else{var n=this.backoff.duration();this._reconnecting=!0;var r=setTimeout((function(){e.skipReconnect||(i(u(v.prototype),"emit",t).call(t,"reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((function(n){n?(e._reconnecting=!1,e.reconnect(),i(u(v.prototype),"emit",t).call(t,"reconnect_error",n)):e.onreconnect()})))}),n);this.subs.push((function(){clearTimeout(r)}))}}},{key:"onreconnect",value:function(){var t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),i(u(v.prototype),"emit",this).call(this,"reconnect",t)}}])&&o(e.prototype,n),a&&o(e,a),v}(p);e.Manager=v},function(t,e,n){var r=n(15);e.websocket=r},function(t,e,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=a(t);if(e){var o=a(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var u=n(1),f=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(a,t);var e,n,r,c=s(a);function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=c.call(this)).opts=t,e.query=t.query,e.readyState="",e.socket=t.socket,e}return e=a,(n=[{key:"onError",value:function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this}},{key:"open",value:function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}},{key:"close",value:function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}},{key:"send",value:function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)}},{key:"onOpen",value:function(){this.readyState="open",this.writable=!0,this.emit("open")}},{key:"onData",value:function(t){var e=u.decodePacket(t,this.socket.binaryType);this.onPacket(e)}},{key:"onPacket",value:function(t){this.emit("packet",t)}},{key:"onClose",value:function(){this.readyState="closed",this.emit("close")}}])&&o(e.prototype,n),r&&o(e,r),a}(n(0));t.exports=f},function(t,e){var n=Object.create(null);n.open="0",n.close="1",n.ping="2",n.pong="3",n.message="4",n.upgrade="5",n.noop="6";var r=Object.create(null);Object.keys(n).forEach((function(t){r[n[t]]=t}));t.exports={PACKET_TYPES:n,PACKET_TYPES_REVERSE:r,ERROR_PACKET:{type:"error",data:"parser error"}}},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,c=!0,a=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return c=t.done,t},e:function(t){a=!0,s=t},f:function(){try{c||null==n.return||n.return()}finally{if(a)throw s}}}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e,n){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function a(t,e){return(a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=h(t);if(e){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return f(this,n)}}function f(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;var p=n(2),l=n(0),y=n(10),d=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1}),v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&a(t,e)}(f,t);var e,n,r,i=u(f);function f(t,e,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,f),(r=i.call(this)).ids=0,r.acks={},r.receiveBuffer=[],r.sendBuffer=[],r.flags={},r.io=t,r.nsp=e,r.ids=0,r.acks={},r.receiveBuffer=[],r.sendBuffer=[],r.connected=!1,r.disconnected=!0,r.flags={},n&&n.auth&&(r.auth=n.auth),r.io._autoConnect&&r.open(),r}return e=f,(n=[{key:"subEvents",value:function(){if(!this.subs){var t=this.io;this.subs=[y.on(t,"open",this.onopen.bind(this)),y.on(t,"packet",this.onpacket.bind(this)),y.on(t,"close",this.onclose.bind(this))]}}},{key:"connect",value:function(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}},{key:"open",value:function(){return this.connect()}},{key:"send",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.unshift("message"),this.emit.apply(this,e),this}},{key:"emit",value:function(t){if(d.hasOwnProperty(t))throw new Error('"'+t+'" is a reserved event name');for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];n.unshift(t);var o={type:p.PacketType.EVENT,data:n,options:{}};o.options.compress=!1!==this.flags.compress,"function"==typeof n[n.length-1]&&(this.acks[this.ids]=n.pop(),o.id=this.ids++);var i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable,s=this.flags.volatile&&(!i||!this.connected);return s||(this.connected?this.packet(o):this.sendBuffer.push(o)),this.flags={},this}},{key:"packet",value:function(t){t.nsp=this.nsp,this.io._packet(t)}},{key:"onopen",value:function(){var t=this;"function"==typeof this.auth?this.auth((function(e){t.packet({type:p.PacketType.CONNECT,data:e})})):this.packet({type:p.PacketType.CONNECT,data:this.auth})}},{key:"onclose",value:function(t){this.connected=!1,this.disconnected=!0,delete this.id,c(h(f.prototype),"emit",this).call(this,"disconnect",t)}},{key:"onpacket",value:function(t){if(t.nsp===this.nsp)switch(t.type){case p.PacketType.CONNECT:if(t.data&&t.data.sid){var e=t.data.sid;this.onconnect(e)}else c(h(f.prototype),"emit",this).call(this,"connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case p.PacketType.EVENT:case p.PacketType.BINARY_EVENT:this.onevent(t);break;case p.PacketType.ACK:case p.PacketType.BINARY_ACK:this.onack(t);break;case p.PacketType.DISCONNECT:this.ondisconnect();break;case p.PacketType.CONNECT_ERROR:var n=new Error(t.data.message);n.data=t.data.data,c(h(f.prototype),"emit",this).call(this,"connect_error",n)}}},{key:"onevent",value:function(t){var e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}},{key:"emitEvent",value:function(t){if(this._anyListeners&&this._anyListeners.length){var e,n=o(this._anyListeners.slice());try{for(n.s();!(e=n.n()).done;)e.value.apply(this,t)}catch(t){n.e(t)}finally{n.f()}}c(h(f.prototype),"emit",this).apply(this,t)}},{key:"ack",value:function(t){var e=this,n=!1;return function(){if(!n){n=!0;for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];e.packet({type:p.PacketType.ACK,id:t,data:o})}}}},{key:"onack",value:function(t){var e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}},{key:"onconnect",value:function(t){this.id=t,this.connected=!0,this.disconnected=!1,c(h(f.prototype),"emit",this).call(this,"connect"),this.emitBuffered()}},{key:"emitBuffered",value:function(){var t=this;this.receiveBuffer.forEach((function(e){return t.emitEvent(e)})),this.receiveBuffer=[],this.sendBuffer.forEach((function(e){return t.packet(e)})),this.sendBuffer=[]}},{key:"ondisconnect",value:function(){this.destroy(),this.onclose("io server disconnect")}},{key:"destroy",value:function(){this.subs&&(this.subs.forEach((function(t){return t()})),this.subs=void 0),this.io._destroy(this)}},{key:"disconnect",value:function(){return this.connected&&this.packet({type:p.PacketType.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}},{key:"close",value:function(){return this.disconnect()}},{key:"compress",value:function(t){return this.flags.compress=t,this}},{key:"onAny",value:function(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}},{key:"prependAny",value:function(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}},{key:"offAny",value:function(t){if(!this._anyListeners)return this;if(t){for(var e=this._anyListeners,n=0;n<e.length;n++)if(t===e[n])return e.splice(n,1),this}else this._anyListeners=[];return this}},{key:"listenersAny",value:function(){return this._anyListeners||[]}},{key:"active",get:function(){return!!this.subs}},{key:"volatile",get:function(){return this.flags.volatile=!0,this}}])&&s(e.prototype,n),r&&s(e,r),f}(l);e.Socket=v},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,n){return t.on(e,n),function(){t.off(e,n)}}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=e.io=e.Manager=e.protocol=void 0;var o=n(12),i=n(4),s=n(9);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return s.Socket}}),t.exports=e=a;var c=e.managers={};function a(t,e){"object"===r(t)&&(e=t,t=void 0),e=e||{};var n,s=o.url(t),a=s.source,u=s.id,f=s.path,h=c[u]&&f in c[u].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||h?n=new i.Manager(a,e):(c[u]||(c[u]=new i.Manager(a,e)),n=c[u]),s.query&&!e.query&&(e.query=s.query),n.socket(s.path,e)}e.io=a;var u=n(2);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return u.protocol}}),e.connect=a;var f=n(4);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return f.Manager}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;var r=n(3);e.url=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==e?e.protocol+"//"+t:"https://"+t),n=r(t)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";var o=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+o+":"+n.port,n.href=n.protocol+"://"+o+(e&&e.port===n.port?"":":"+n.port),n}},function(t,e,n){var r=n(14);t.exports=function(t,e){return new r(t,e)},t.exports.Socket=r,t.exports.protocol=r.protocol,t.exports.Transport=n(6),t.exports.transports=n(5),t.exports.parser=n(1)},function(t,e,n){function r(){return(r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=f(t);if(e){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function f(t){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var h=n(5),p=n(0),l=n(1),y=n(3),d=n(8),v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(p,t);var e,n,u,f=a(p);function p(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return i(this,p),e=f.call(this),t&&"object"===o(t)&&(n=t,t=null),t?(t=y(t),n.hostname=t.host,n.secure="https"===t.protocol||"wss"===t.protocol,n.port=t.port,t.query&&(n.query=t.query)):n.host&&(n.hostname=y(n.host).host),e.secure=null!=n.secure?n.secure:"undefined"!=typeof location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=e.secure?"443":"80"),e.hostname=n.hostname||("undefined"!=typeof location?location.hostname:"localhost"),e.port=n.port||("undefined"!=typeof location&&location.port?location.port:e.secure?443:80),e.transports=n.transports||["polling","websocket"],e.readyState="",e.writeBuffer=[],e.prevBufferLen=0,e.opts=r({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{}},n),e.opts.path=e.opts.path.replace(/\/$/,"")+"/","string"==typeof e.opts.query&&(e.opts.query=d.decode(e.opts.query)),e.id=null,e.upgrades=null,e.pingInterval=null,e.pingTimeout=null,e.pingTimeoutTimer=null,e.open(),e}return e=p,(n=[{key:"createTransport",value:function(t){var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.opts.query);e.EIO=l.protocol,e.transport=t,this.id&&(e.sid=this.id);var n=r({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new h[t](n)}},{key:"open",value:function(){var t;if(this.opts.rememberUpgrade&&p.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}},{key:"setTransport",value:function(t){var e=this;this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))}},{key:"probe",value:function(t){var e=this.createTransport(t,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var t=!this.supportsBinary&&r.transport.supportsBinary;n=n||t}n||(e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(t){if(!n)if("pong"===t.type&&"probe"===t.data){if(r.upgrading=!0,r.emit("upgrading",e),!e)return;p.priorWebsocketSuccess="websocket"===e.name,r.transport.pause((function(){n||"closed"!==r.readyState&&(f(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())}))}else{var o=new Error("probe error");o.transport=e.name,r.emit("upgradeError",o)}})))}function i(){n||(n=!0,f(),e.close(),e=null)}function s(t){var n=new Error("probe error: "+t);n.transport=e.name,i(),r.emit("upgradeError",n)}function c(){s("transport closed")}function a(){s("socket closed")}function u(t){e&&t.name!==e.name&&i()}function f(){e.removeListener("open",o),e.removeListener("error",s),e.removeListener("close",c),r.removeListener("close",a),r.removeListener("upgrading",u)}p.priorWebsocketSuccess=!1,e.once("open",o),e.once("error",s),e.once("close",c),this.once("close",a),this.once("upgrading",u),e.open()}},{key:"onOpen",value:function(){if(this.readyState="open",p.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause)for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},{key:"onPacket",value:function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}}},{key:"onHandshake",value:function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}},{key:"resetPingTimeout",value:function(){var t=this;clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((function(){t.onClose("ping timeout")}),this.pingInterval+this.pingTimeout)}},{key:"onDrain",value:function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}},{key:"flush",value:function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}},{key:"write",value:function(t,e,n){return this.sendPacket("message",t,e,n),this}},{key:"send",value:function(t,e,n){return this.sendPacket("message",t,e,n),this}},{key:"sendPacket",value:function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:t,data:e,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}}},{key:"close",value:function(){var t=this;function e(){t.onClose("forced close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(function(){this.upgrading?r():e()})):this.upgrading?r():e()),this}},{key:"onError",value:function(t){p.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}},{key:"onClose",value:function(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}},{key:"filterUpgrades",value:function(t){for(var e=[],n=0,r=t.length;n<r;n++)~this.transports.indexOf(t[n])&&e.push(t[n]);return e}}])&&s(e.prototype,n),u&&s(e,u),p}(p);v.priorWebsocketSuccess=!1,v.protocol=l.protocol,t.exports=v},function(t,e,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return(i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=u(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function c(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=u(t);if(e){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var f=n(6),h=n(1),p=n(8),l=n(19),y=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(f,t);var e,n,r,a=c(f);function f(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,f),(e=a.call(this,t)).supportsBinary=!t.forceBase64,e}return e=f,(n=[{key:"doOpen",value:function(){if(this.check()){var t={url:this.uri()};this.opts.auth&&(t.data=this.opts.auth),this.opts.protocols&&(t.protocols=this.opts.protocols),this.opts.extraHeaders&&(t.headers=this.opts.extraHeaders);try{this.ws=wx.connectSocket(t)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}}},{key:"addEventListeners",value:function(){var t=this;this.ws.onOpen((function(){t.onOpen()})),this.ws.onError((function(e){t.onError("websocket error",e)})),this.ws.onClose((function(){t.onClose()})),this.ws.onMessage((function(e){t.onData(e.data)}))}},{key:"write",value:function(t){var e=this;this.writable=!1;for(var n,r=t.length,o=0,i=r;o<i;o++)n=t[o],h.encodePacket(n,e.supportsBinary,(function(t){try{e.ws.send({data:t})}catch(t){}--r||(e.emit("flush"),setTimeout((function(){e.writable=!0,e.emit("drain")}),0))}))}},{key:"onClose",value:function(){i(u(f.prototype),"onClose",this).call(this)}},{key:"doClose",value:function(){void 0!==this.ws&&this.ws.close()}},{key:"uri",value:function(){var t=this.query||{},e=this.opts.secure?"wss":"ws",n="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=l()),this.supportsBinary||(t.b64=1),(t=p.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+t}},{key:"check",value:function(){return"function"==typeof wx.connectSocket}},{key:"name",get:function(){return"websocket"}}])&&o(e.prototype,n),r&&o(e,r),f}(f);t.exports=y},function(t,e,n){var r=n(7).PACKET_TYPES,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,s=function(t,e){var n=new FileReader;return n.onload=function(){var t=n.result.split(",")[1];e("b"+t)},n.readAsDataURL(t)};t.exports=function(t,e,n){var c,a=t.type,u=t.data;return o&&u instanceof Blob?e?n(u):s(u,n):i&&(u instanceof ArrayBuffer||(c=u,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(c):c&&c.buffer instanceof ArrayBuffer))?e?n(u instanceof ArrayBuffer?u:u.buffer):s(new Blob([u]),n):n(r[a]+(u||""))}},function(t,e,n){var r,o=n(7),i=o.PACKET_TYPES_REVERSE,s=o.ERROR_PACKET;"function"==typeof ArrayBuffer&&(r=n(18));var c=function(t,e){if(r){var n=r.decode(t);return a(n,e)}return{base64:!0,data:t}},a=function(t,e){switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=function(t,e){if("string"!=typeof t)return{type:"message",data:a(t,e)};var n=t.charAt(0);return"b"===n?{type:"message",data:c(t.substring(1),e)}:i[n]?t.length>1?{type:i[n],data:t.substring(1)}:{type:i[n]}:s}},function(t,e){!function(t){"use strict";e.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i="";for(n=0;n<o;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(e){var n,r,o,i,s,c=.75*e.length,a=e.length,u=0;"="===e[e.length-1]&&(c--,"="===e[e.length-2]&&c--);var f=new ArrayBuffer(c),h=new Uint8Array(f);for(n=0;n<a;n+=4)r=t.indexOf(e[n]),o=t.indexOf(e[n+1]),i=t.indexOf(e[n+2]),s=t.indexOf(e[n+3]),h[u++]=r<<2|o>>4,h[u++]=(15&o)<<4|i>>2,h[u++]=(3&i)<<6|63&s;return f}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},function(t,e,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i={},s=0,c=0;function a(t){var e="";do{e=o[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function u(){var t=a(+new Date);return t!==r?(s=0,r=t):t+"."+a(s++)}for(;c<64;c++)i[o[c]]=c;u.encode=a,u.decode=function(t){var e=0;for(c=0;c<t.length;c++)e=64*e+i[t.charAt(c)];return e},t.exports=u},function(t,e,n){e.encode=n(21),e.decode=n(22)},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e,n){for(var r=0,o=0,i=n.length;o<i;o++)(r=n.charCodeAt(o))<128?t.setUint8(e++,r):r<2048?(t.setUint8(e++,192|r>>6),t.setUint8(e++,128|63&r)):r<55296||r>=57344?(t.setUint8(e++,224|r>>12),t.setUint8(e++,128|r>>6&63),t.setUint8(e++,128|63&r)):(o++,r=65536+((1023&r)<<10|1023&n.charCodeAt(o)),t.setUint8(e++,240|r>>18),t.setUint8(e++,128|r>>12&63),t.setUint8(e++,128|r>>6&63),t.setUint8(e++,128|63&r))}t.exports=function(t){var e=[],n=[],i=function t(e,n,o){var i=r(o),s=0,c=0,a=0,u=0,f=0,h=0;if("string"===i){if((f=function(t){for(var e=0,n=0,r=0,o=t.length;r<o;r++)(e=t.charCodeAt(r))<128?n+=1:e<2048?n+=2:e<55296||e>=57344?n+=3:(r++,n+=4);return n}(o))<32)e.push(160|f),h=1;else if(f<256)e.push(217,f),h=2;else if(f<65536)e.push(218,f>>8,f),h=3;else{if(!(f<4294967296))throw new Error("String too long");e.push(219,f>>24,f>>16,f>>8,f),h=5}return n.push({_str:o,_length:f,_offset:e.length}),h+f}if("number"===i)return Math.floor(o)===o&&isFinite(o)?o>=0?o<128?(e.push(o),1):o<256?(e.push(204,o),2):o<65536?(e.push(205,o>>8,o),3):o<4294967296?(e.push(206,o>>24,o>>16,o>>8,o),5):(a=o/Math.pow(2,32)>>0,u=o>>>0,e.push(207,a>>24,a>>16,a>>8,a,u>>24,u>>16,u>>8,u),9):o>=-32?(e.push(o),1):o>=-128?(e.push(208,o),2):o>=-32768?(e.push(209,o>>8,o),3):o>=-2147483648?(e.push(210,o>>24,o>>16,o>>8,o),5):(a=Math.floor(o/Math.pow(2,32)),u=o>>>0,e.push(211,a>>24,a>>16,a>>8,a,u>>24,u>>16,u>>8,u),9):(e.push(203),n.push({_float:o,_length:8,_offset:e.length}),9);if("object"===i){if(null===o)return e.push(192),1;if(Array.isArray(o)){if((f=o.length)<16)e.push(144|f),h=1;else if(f<65536)e.push(220,f>>8,f),h=3;else{if(!(f<4294967296))throw new Error("Array too large");e.push(221,f>>24,f>>16,f>>8,f),h=5}for(s=0;s<f;s++)h+=t(e,n,o[s]);return h}if(o instanceof Date){var p=o.getTime();return a=Math.floor(p/Math.pow(2,32)),u=p>>>0,e.push(215,0,a>>24,a>>16,a>>8,a,u>>24,u>>16,u>>8,u),10}if(o instanceof ArrayBuffer){if((f=o.byteLength)<256)e.push(196,f),h=2;else if(f<65536)e.push(197,f>>8,f),h=3;else{if(!(f<4294967296))throw new Error("Buffer too large");e.push(198,f>>24,f>>16,f>>8,f),h=5}return n.push({_bin:o,_length:f,_offset:e.length}),h+f}if("function"==typeof o.toJSON)return t(e,n,o.toJSON());var l=[],y="",d=Object.keys(o);for(s=0,c=d.length;s<c;s++)"function"!=typeof o[y=d[s]]&&l.push(y);if((f=l.length)<16)e.push(128|f),h=1;else if(f<65536)e.push(222,f>>8,f),h=3;else{if(!(f<4294967296))throw new Error("Object too large");e.push(223,f>>24,f>>16,f>>8,f),h=5}for(s=0;s<f;s++)h+=t(e,n,y=l[s]),h+=t(e,n,o[y]);return h}if("boolean"===i)return e.push(o?195:194),1;if("undefined"===i)return e.push(212,0,0),3;throw new Error("Could not encode")}(e,n,t),s=new ArrayBuffer(i),c=new DataView(s),a=0,u=0,f=-1;n.length>0&&(f=n[0]._offset);for(var h,p=0,l=0,y=0,d=e.length;y<d;y++)if(c.setUint8(u+y,e[y]),y+1===f){if(p=(h=n[a])._length,l=u+f,h._bin)for(var v=new Uint8Array(h._bin),b=0;b<p;b++)c.setUint8(l+b,v[b]);else h._str?o(c,l,h._str):void 0!==h._float&&c.setFloat64(l,h._float);u+=p,n[++a]&&(f=n[a]._offset)}return s}},function(t,e,n){"use strict";function r(t){if(this._offset=0,t instanceof ArrayBuffer)this._buffer=t,this._view=new DataView(this._buffer);else{if(!ArrayBuffer.isView(t))throw new Error("Invalid argument");this._buffer=t.buffer,this._view=new DataView(this._buffer,t.byteOffset,t.byteLength)}}r.prototype._array=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=this._parse();return e},r.prototype._map=function(t){for(var e={},n=0;n<t;n++)e[this._parse()]=this._parse();return e},r.prototype._str=function(t){var e=function(t,e,n){for(var r="",o=0,i=e,s=e+n;i<s;i++){var c=t.getUint8(i);if(0!=(128&c))if(192!=(224&c))if(224!=(240&c)){if(240!=(248&c))throw new Error("Invalid byte "+c.toString(16));(o=(7&c)<<18|(63&t.getUint8(++i))<<12|(63&t.getUint8(++i))<<6|(63&t.getUint8(++i))<<0)>=65536?(o-=65536,r+=String.fromCharCode(55296+(o>>>10),56320+(1023&o))):r+=String.fromCharCode(o)}else r+=String.fromCharCode((15&c)<<12|(63&t.getUint8(++i))<<6|(63&t.getUint8(++i))<<0);else r+=String.fromCharCode((31&c)<<6|63&t.getUint8(++i));else r+=String.fromCharCode(c)}return r}(this._view,this._offset,t);return this._offset+=t,e},r.prototype._bin=function(t){var e=this._buffer.slice(this._offset,this._offset+t);return this._offset+=t,e},r.prototype._parse=function(){var t,e=this._view.getUint8(this._offset++),n=0,r=0,o=0,i=0;if(e<192)return e<128?e:e<144?this._map(15&e):e<160?this._array(15&e):this._str(31&e);if(e>223)return-1*(255-e+1);switch(e){case 192:return null;case 194:return!1;case 195:return!0;case 196:return n=this._view.getUint8(this._offset),this._offset+=1,this._bin(n);case 197:return n=this._view.getUint16(this._offset),this._offset+=2,this._bin(n);case 198:return n=this._view.getUint32(this._offset),this._offset+=4,this._bin(n);case 199:return n=this._view.getUint8(this._offset),r=this._view.getInt8(this._offset+1),this._offset+=2,[r,this._bin(n)];case 200:return n=this._view.getUint16(this._offset),r=this._view.getInt8(this._offset+2),this._offset+=3,[r,this._bin(n)];case 201:return n=this._view.getUint32(this._offset),r=this._view.getInt8(this._offset+4),this._offset+=5,[r,this._bin(n)];case 202:return t=this._view.getFloat32(this._offset),this._offset+=4,t;case 203:return t=this._view.getFloat64(this._offset),this._offset+=8,t;case 204:return t=this._view.getUint8(this._offset),this._offset+=1,t;case 205:return t=this._view.getUint16(this._offset),this._offset+=2,t;case 206:return t=this._view.getUint32(this._offset),this._offset+=4,t;case 207:return o=this._view.getUint32(this._offset)*Math.pow(2,32),i=this._view.getUint32(this._offset+4),this._offset+=8,o+i;case 208:return t=this._view.getInt8(this._offset),this._offset+=1,t;case 209:return t=this._view.getInt16(this._offset),this._offset+=2,t;case 210:return t=this._view.getInt32(this._offset),this._offset+=4,t;case 211:return o=this._view.getInt32(this._offset)*Math.pow(2,32),i=this._view.getUint32(this._offset+4),this._offset+=8,o+i;case 212:return r=this._view.getInt8(this._offset),this._offset+=1,0===r?void(this._offset+=1):[r,this._bin(1)];case 213:return r=this._view.getInt8(this._offset),this._offset+=1,[r,this._bin(2)];case 214:return r=this._view.getInt8(this._offset),this._offset+=1,[r,this._bin(4)];case 215:return r=this._view.getInt8(this._offset),this._offset+=1,0===r?(o=this._view.getInt32(this._offset)*Math.pow(2,32),i=this._view.getUint32(this._offset+4),this._offset+=8,new Date(o+i)):[r,this._bin(8)];case 216:return r=this._view.getInt8(this._offset),this._offset+=1,[r,this._bin(16)];case 217:return n=this._view.getUint8(this._offset),this._offset+=1,this._str(n);case 218:return n=this._view.getUint16(this._offset),this._offset+=2,this._str(n);case 219:return n=this._view.getUint32(this._offset),this._offset+=4,this._str(n);case 220:return n=this._view.getUint16(this._offset),this._offset+=2,this._array(n);case 221:return n=this._view.getUint32(this._offset),this._offset+=4,this._array(n);case 222:return n=this._view.getUint16(this._offset),this._offset+=2,this._map(n);case 223:return n=this._view.getUint32(this._offset),this._offset+=4,this._map(n)}throw new Error("Could not parse")},t.exports=function(t){var e=new r(t),n=e._parse();if(e._offset!==t.byteLength)throw new Error(t.byteLength-e._offset+" trailing bytes");return n}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pby93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vaW8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vaW8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLW1zZ3BhY2stcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovL2lvLy4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwid2VicGFjazovL2lvLy4vYnVpbGQvbWFuYWdlci5qcyIsIndlYnBhY2s6Ly9pby8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwid2VicGFjazovL2lvLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly9pby8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9jb21tb25zLmpzIiwid2VicGFjazovL2lvLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW8vLi9idWlsZC9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vaW8vLi9idWlsZC9vbi5qcyIsIndlYnBhY2s6Ly9pby8uL2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovL2lvLy4vYnVpbGQvdXJsLmpzIiwid2VicGFjazovL2lvLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovL2lvLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly9pby8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3d4LXdlYnNvY2tldC5qcyIsIndlYnBhY2s6Ly9pby8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9lbmNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9pby8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9kZWNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9pby8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9pby8uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9pby8uL25vZGVfbW9kdWxlcy9ub3RlcGFjay5pby9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW8vLi9ub2RlX21vZHVsZXMvbm90ZXBhY2suaW8vYnJvd3Nlci9lbmNvZGUuanMiLCJ3ZWJwYWNrOi8vaW8vLi9ub2RlX21vZHVsZXMvbm90ZXBhY2suaW8vYnJvd3Nlci9kZWNvZGUuanMiLCJ3ZWJwYWNrOi8vaW8vLi9ub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ3aW5kb3ciLCJnbG9iYWwiLCJGdW5jdGlvbiIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJFbWl0dGVyIiwib2JqIiwibWl4aW4iLCJvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImZuIiwidGhpcyIsIl9jYWxsYmFja3MiLCJwdXNoIiwib25jZSIsIm9mZiIsImFwcGx5IiwiYXJndW1lbnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGVuZ3RoIiwiY2IiLCJjYWxsYmFja3MiLCJzcGxpY2UiLCJlbWl0IiwiYXJncyIsIkFycmF5IiwibGVuIiwic2xpY2UiLCJsaXN0ZW5lcnMiLCJoYXNMaXN0ZW5lcnMiLCJlbmNvZGVQYWNrZXQiLCJyZXF1aXJlIiwiZGVjb2RlUGFja2V0IiwiU0VQQVJBVE9SIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicHJvdG9jb2wiLCJlbmNvZGVQYXlsb2FkIiwicGFja2V0cyIsImNhbGxiYWNrIiwiZW5jb2RlZFBhY2tldHMiLCJjb3VudCIsImZvckVhY2giLCJwYWNrZXQiLCJlbmNvZGVkUGFja2V0Iiwiam9pbiIsImRlY29kZVBheWxvYWQiLCJlbmNvZGVkUGF5bG9hZCIsImJpbmFyeVR5cGUiLCJzcGxpdCIsImRlY29kZWRQYWNrZXQiLCJ0eXBlIiwibXNncGFjayIsIlBhY2tldFR5cGUiLCJDT05ORUNUIiwiRElTQ09OTkVDVCIsIkVWRU5UIiwiQUNLIiwiQ09OTkVDVF9FUlJPUiIsImlzSW50ZWdlciIsIk51bWJlciIsImlzRmluaXRlIiwiTWF0aCIsImZsb29yIiwiaXNTdHJpbmciLCJpc09iamVjdCIsInRvU3RyaW5nIiwiRW5jb2RlciIsIkRlY29kZXIiLCJlbmNvZGUiLCJhZGQiLCJkZWNvZGVkIiwiZGVjb2RlIiwiY2hlY2tQYWNrZXQiLCJFcnJvciIsIm5zcCIsInVuZGVmaW5lZCIsImRhdGEiLCJpc0FycmF5IiwiaXNEYXRhVmFsaWQiLCJpZCIsImRlc3Ryb3kiLCJyZSIsInBhcnRzIiwic3RyIiwic3JjIiwiYiIsImluZGV4T2YiLCJlIiwic3Vic3RyaW5nIiwicmVwbGFjZSIsInF1ZXJ5IiwiZXhlYyIsInVyaSIsInNvdXJjZSIsImhvc3QiLCJhdXRob3JpdHkiLCJpcHY2dXJpIiwicGF0aE5hbWVzIiwicGF0aCIsIm5hbWVzIiwic3Vic3RyIiwicXVlcnlLZXkiLCIkMCIsIiQxIiwiJDIiLCJNYW5hZ2VyIiwiZWlvIiwic29ja2V0XzEiLCJwYXJzZXIiLCJvbl8xIiwiQmFja29mZiIsIm9wdHMiLCJuc3BzIiwic3VicyIsInJlY29ubmVjdGlvbiIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwiSW5maW5pdHkiLCJyZWNvbm5lY3Rpb25EZWxheSIsInJlY29ubmVjdGlvbkRlbGF5TWF4IiwicmFuZG9taXphdGlvbkZhY3RvciIsImJhY2tvZmYiLCJtaW4iLCJtYXgiLCJqaXR0ZXIiLCJ0aW1lb3V0IiwiX3JlYWR5U3RhdGUiLCJfcGFyc2VyIiwiZW5jb2RlciIsImRlY29kZXIiLCJfYXV0b0Nvbm5lY3QiLCJhdXRvQ29ubmVjdCIsIm9wZW4iLCJ2IiwiX3JlY29ubmVjdGlvbiIsIl9yZWNvbm5lY3Rpb25BdHRlbXB0cyIsIl9hIiwiX3JlY29ubmVjdGlvbkRlbGF5Iiwic2V0TWluIiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJzZXRKaXR0ZXIiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJzZXRNYXgiLCJfdGltZW91dCIsIl9yZWNvbm5lY3RpbmciLCJhdHRlbXB0cyIsInJlY29ubmVjdCIsImVuZ2luZSIsInNvY2tldCIsInNraXBSZWNvbm5lY3QiLCJvcGVuU3ViRGVzdHJveSIsIm9ub3BlbiIsImVycm9yU3ViIiwiZXJyIiwiY2xlYW51cCIsIm1heWJlUmVjb25uZWN0T25PcGVuIiwidGltZXIiLCJzZXRUaW1lb3V0IiwiY2xvc2UiLCJjbGVhclRpbWVvdXQiLCJvbnBpbmciLCJvbmRhdGEiLCJvbmVycm9yIiwib25jbG9zZSIsIm9uZGVjb2RlZCIsIlNvY2tldCIsImtleXMiLCJhY3RpdmUiLCJfY2xvc2UiLCJ3cml0ZSIsIm9wdGlvbnMiLCJzdWJEZXN0cm95IiwicmVzZXQiLCJyZWFzb24iLCJkZWxheSIsImR1cmF0aW9uIiwib25yZWNvbm5lY3QiLCJhdHRlbXB0Iiwid2Vic29ja2V0IiwiVHJhbnNwb3J0IiwicmVhZHlTdGF0ZSIsIm1zZyIsImRlc2MiLCJkZXNjcmlwdGlvbiIsImRvT3BlbiIsImRvQ2xvc2UiLCJvbkNsb3NlIiwid3JpdGFibGUiLCJvblBhY2tldCIsIlBBQ0tFVF9UWVBFUyIsIlBBQ0tFVF9UWVBFU19SRVZFUlNFIiwiRVJST1JfUEFDS0VUIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXMiLCJxcnkiLCJwYWlycyIsInBhaXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzb2NrZXRfaW9fcGFyc2VyXzEiLCJSRVNFUlZFRF9FVkVOVFMiLCJmcmVlemUiLCJjb25uZWN0IiwiY29ubmVjdF9lcnJvciIsImRpc2Nvbm5lY3QiLCJkaXNjb25uZWN0aW5nIiwibmV3TGlzdGVuZXIiLCJpbyIsImlkcyIsImFja3MiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsImZsYWdzIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiYXV0aCIsIm9ucGFja2V0Iiwic3ViRXZlbnRzIiwidW5zaGlmdCIsImV2IiwiY29tcHJlc3MiLCJwb3AiLCJpc1RyYW5zcG9ydFdyaXRhYmxlIiwidHJhbnNwb3J0IiwiZGlzY2FyZFBhY2tldCIsIl9wYWNrZXQiLCJzaWQiLCJvbmNvbm5lY3QiLCJCSU5BUllfRVZFTlQiLCJvbmV2ZW50IiwiQklOQVJZX0FDSyIsIm9uYWNrIiwib25kaXNjb25uZWN0IiwibWVzc2FnZSIsImFjayIsImVtaXRFdmVudCIsIl9hbnlMaXN0ZW5lcnMiLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwibGlzdGVuZXIiLCJ1cmxfMSIsIm1hbmFnZXJfMSIsImxvb2t1cCIsImNhY2hlIiwibWFuYWdlcnMiLCJwYXJzZWQiLCJ1cmwiLCJzYW1lTmFtZXNwYWNlIiwiZm9yY2VOZXciLCJtdWx0aXBsZXgiLCJtYW5hZ2VyXzIiLCJwYXJzZXVyaSIsImxvYyIsImxvY2F0aW9uIiwiY2hhckF0IiwidGVzdCIsInBvcnQiLCJocmVmIiwidHJhbnNwb3J0cyIsInBhcnNlcXMiLCJob3N0bmFtZSIsInNlY3VyZSIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsImFnZW50Iiwid2l0aENyZWRlbnRpYWxzIiwidXBncmFkZSIsImpzb25wIiwidGltZXN0YW1wUGFyYW0iLCJyZW1lbWJlclVwZ3JhZGUiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInRocmVzaG9sZCIsInRyYW5zcG9ydE9wdGlvbnMiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ1RpbWVvdXRUaW1lciIsImNsb25lIiwiRUlPIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwiY3JlYXRlVHJhbnNwb3J0Iiwic2hpZnQiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwib25FcnJvciIsInByb2JlIiwiZmFpbGVkIiwib25UcmFuc3BvcnRPcGVuIiwib25seUJpbmFyeVVwZ3JhZGVzIiwidXBncmFkZUxvc2VzQmluYXJ5Iiwic3VwcG9ydHNCaW5hcnkiLCJzZW5kIiwidXBncmFkaW5nIiwicGF1c2UiLCJmbHVzaCIsImZyZWV6ZVRyYW5zcG9ydCIsImVycm9yIiwib25UcmFuc3BvcnRDbG9zZSIsIm9udXBncmFkZSIsInRvIiwib25IYW5kc2hha2UiLCJKU09OIiwicGFyc2UiLCJyZXNldFBpbmdUaW1lb3V0Iiwic2VuZFBhY2tldCIsImNvZGUiLCJmaWx0ZXJVcGdyYWRlcyIsIm9uT3BlbiIsImNsZWFudXBBbmRDbG9zZSIsIndhaXRGb3JVcGdyYWRlIiwicGluZ0ludGVydmFsVGltZXIiLCJmaWx0ZXJlZFVwZ3JhZGVzIiwiaiIsInllYXN0IiwiV1MiLCJmb3JjZUJhc2U2NCIsImNoZWNrIiwicHJvdG9jb2xzIiwiZXh0cmFIZWFkZXJzIiwiaGVhZGVycyIsIndzIiwid3giLCJjb25uZWN0U29ja2V0Iiwic3VwcG9ydHMiLCJiaW5hcnkiLCJhZGRFdmVudExpc3RlbmVycyIsIm9uTWVzc2FnZSIsIm9uRGF0YSIsInRvdGFsIiwic2NoZW1hIiwidGltZXN0YW1wUmVxdWVzdHMiLCJiNjQiLCJ3aXRoTmF0aXZlQmxvYiIsIkJsb2IiLCJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImVuY29kZUJsb2JBc0Jhc2U2NCIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwiY29udGVudCIsInJlc3VsdCIsInJlYWRBc0RhdGFVUkwiLCJpc1ZpZXciLCJidWZmZXIiLCJiYXNlNjRkZWNvZGVyIiwiZGVjb2RlQmFzZTY0UGFja2V0IiwibWFwQmluYXJ5IiwiYmFzZTY0IiwiY2hhcnMiLCJhcnJheWJ1ZmZlciIsImJ5dGVzIiwiVWludDhBcnJheSIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiYnVmZmVyTGVuZ3RoIiwicHJldiIsImFscGhhYmV0IiwibWFwIiwic2VlZCIsIm51bSIsImVuY29kZWQiLCJub3ciLCJEYXRlIiwidXRmOFdyaXRlIiwidmlldyIsIm9mZnNldCIsImNoYXJDb2RlQXQiLCJzZXRVaW50OCIsImRlZmVycyIsInNpemUiLCJfZW5jb2RlIiwiaGkiLCJsbyIsInV0ZjhMZW5ndGgiLCJfc3RyIiwiX2xlbmd0aCIsIl9vZmZzZXQiLCJwb3ciLCJfZmxvYXQiLCJ0aW1lIiwiZ2V0VGltZSIsImJ5dGVMZW5ndGgiLCJfYmluIiwidG9KU09OIiwiYWxsS2V5cyIsImJ1ZiIsIkRhdGFWaWV3IiwiZGVmZXJJbmRleCIsImRlZmVyV3JpdHRlbiIsIm5leHRPZmZzZXQiLCJkZWZlciIsImRlZmVyTGVuZ3RoIiwiYmluIiwic2V0RmxvYXQ2NCIsIl9idWZmZXIiLCJfdmlldyIsImJ5dGVPZmZzZXQiLCJfYXJyYXkiLCJfcGFyc2UiLCJfbWFwIiwic3RyaW5nIiwiY2hyIiwiZW5kIiwiYnl0ZSIsImdldFVpbnQ4IiwidXRmOFJlYWQiLCJwcmVmaXgiLCJnZXRVaW50MTYiLCJnZXRVaW50MzIiLCJnZXRJbnQ4IiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJnZXRJbnQxNiIsImdldEludDMyIiwibXMiLCJmYWN0b3IiLCJyYW5kIiwicmFuZG9tIiwiZGV2aWF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7OztDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBWSxHQUFJRCxJQUVoQkQsRUFBUyxHQUFJQyxJQVJmLENBVTBCLG9CQUFUSyxLQUNBQSxLQUNrQixvQkFBWEMsT0FDUEEsT0FDa0Isb0JBQVhDLE9BQ1BBLE9BRUFDLFNBQVMsY0FBVEEsSUFFUCxXQUNWLE8sWUNuQkUsSUFBSUMsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVVYsUUFHbkMsSUFBSUMsRUFBU08sRUFBaUJFLEdBQVksQ0FDekNDLEVBQUdELEVBQ0hFLEdBQUcsRUFDSFosUUFBUyxJQVVWLE9BTkFhLEVBQVFILEdBQVVJLEtBQUtiLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNTLEdBRy9EUixFQUFPVyxHQUFJLEVBR0pYLEVBQU9ELFFBMERmLE9BckRBUyxFQUFvQk0sRUFBSUYsRUFHeEJKLEVBQW9CTyxFQUFJUixFQUd4QkMsRUFBb0JRLEVBQUksU0FBU2pCLEVBQVNrQixFQUFNQyxHQUMzQ1YsRUFBb0JXLEVBQUVwQixFQUFTa0IsSUFDbENHLE9BQU9DLGVBQWV0QixFQUFTa0IsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFVixFQUFvQmdCLEVBQUksU0FBU3pCLEdBQ1gsb0JBQVgwQixRQUEwQkEsT0FBT0MsYUFD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LEVBQUl4WixLQUFLa0gsTUFTM0JaLEVBQVFqSCxVQUFVOEssTUFBUSxXQUN4Qm5LLEtBQUt3SSxTQUFXLEdBU2xCbEMsRUFBUWpILFVBQVU0SSxPQUFTLFNBQVNoQixHQUNsQ2pILEtBQUt3WixHQUFLdlMsR0FTWlgsRUFBUWpILFVBQVVnSixPQUFTLFNBQVNuQixHQUNsQ2xILEtBQUtrSCxJQUFNQSxHQVNiWixFQUFRakgsVUFBVThJLFVBQVksU0FBU2hCLEdBQ3JDbkgsS0FBS21ILE9BQVNBIiwiZmlsZSI6InNvY2tldC5pby5tc2dwYWNrLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImlvXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImlvXCJdID0gZmFjdG9yeSgpO1xufSkoKCgpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICAgICAgfVxuICAgIH0pKCksIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMSk7XG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJlbW92ZSBldmVudCBzcGVjaWZpYyBhcnJheXMgZm9yIGV2ZW50IHR5cGVzIHRoYXQgbm9cclxuICAvLyBvbmUgaXMgc3Vic2NyaWJlZCBmb3IgdG8gYXZvaWQgbWVtb3J5IGxlYWsuXHJcbiAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcclxuICB9XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcbiIsImNvbnN0IGVuY29kZVBhY2tldCA9IHJlcXVpcmUoXCIuL2VuY29kZVBhY2tldFwiKTtcbmNvbnN0IGRlY29kZVBhY2tldCA9IHJlcXVpcmUoXCIuL2RlY29kZVBhY2tldFwiKTtcblxuY29uc3QgU0VQQVJBVE9SID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMCk7IC8vIHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EZWxpbWl0ZXIjQVNDSUlfZGVsaW1pdGVkX3RleHRcblxuY29uc3QgZW5jb2RlUGF5bG9hZCA9IChwYWNrZXRzLCBjYWxsYmFjaykgPT4ge1xuICAvLyBzb21lIHBhY2tldHMgbWF5IGJlIGFkZGVkIHRvIHRoZSBhcnJheSB3aGlsZSBlbmNvZGluZywgc28gdGhlIGluaXRpYWwgbGVuZ3RoIG11c3QgYmUgc2F2ZWRcbiAgY29uc3QgbGVuZ3RoID0gcGFja2V0cy5sZW5ndGg7XG4gIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gIGxldCBjb3VudCA9IDA7XG5cbiAgcGFja2V0cy5mb3JFYWNoKChwYWNrZXQsIGkpID0+IHtcbiAgICAvLyBmb3JjZSBiYXNlNjQgZW5jb2RpbmcgZm9yIGJpbmFyeSBwYWNrZXRzXG4gICAgZW5jb2RlUGFja2V0KHBhY2tldCwgZmFsc2UsIGVuY29kZWRQYWNrZXQgPT4ge1xuICAgICAgZW5jb2RlZFBhY2tldHNbaV0gPSBlbmNvZGVkUGFja2V0O1xuICAgICAgaWYgKCsrY291bnQgPT09IGxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjayhlbmNvZGVkUGFja2V0cy5qb2luKFNFUEFSQVRPUikpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG5cbmNvbnN0IGRlY29kZVBheWxvYWQgPSAoZW5jb2RlZFBheWxvYWQsIGJpbmFyeVR5cGUpID0+IHtcbiAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSBlbmNvZGVkUGF5bG9hZC5zcGxpdChTRVBBUkFUT1IpO1xuICBjb25zdCBwYWNrZXRzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkZWNvZGVkUGFja2V0ID0gZGVjb2RlUGFja2V0KGVuY29kZWRQYWNrZXRzW2ldLCBiaW5hcnlUeXBlKTtcbiAgICBwYWNrZXRzLnB1c2goZGVjb2RlZFBhY2tldCk7XG4gICAgaWYgKGRlY29kZWRQYWNrZXQudHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhY2tldHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcHJvdG9jb2w6IDQsXG4gIGVuY29kZVBhY2tldCxcbiAgZW5jb2RlUGF5bG9hZCxcbiAgZGVjb2RlUGFja2V0LFxuICBkZWNvZGVQYXlsb2FkXG59O1xuIiwidmFyIG1zZ3BhY2sgPSByZXF1aXJlKFwibm90ZXBhY2suaW9cIik7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoXCJjb21wb25lbnQtZW1pdHRlclwiKTtcblxuZXhwb3J0cy5wcm90b2NvbCA9IDU7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL3NvY2tldGlvL3NvY2tldC5pby1wcm90b2NvbClcbiAqL1xuXG52YXIgUGFja2V0VHlwZSA9IChleHBvcnRzLlBhY2tldFR5cGUgPSB7XG4gIENPTk5FQ1Q6IDAsXG4gIERJU0NPTk5FQ1Q6IDEsXG4gIEVWRU5UOiAyLFxuICBBQ0s6IDMsXG4gIENPTk5FQ1RfRVJST1I6IDQsXG59KTtcblxudmFyIGlzSW50ZWdlciA9XG4gIE51bWJlci5pc0ludGVnZXIgfHxcbiAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgaXNGaW5pdGUodmFsdWUpICYmXG4gICAgICBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWVcbiAgICApO1xuICB9O1xuXG52YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn07XG5cbnZhciBpc09iamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIjtcbn07XG5cbmZ1bmN0aW9uIEVuY29kZXIoKSB7fVxuXG5FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHJldHVybiBbbXNncGFjay5lbmNvZGUocGFja2V0KV07XG59O1xuXG5mdW5jdGlvbiBEZWNvZGVyKCkge31cblxuRW1pdHRlcihEZWNvZGVyLnByb3RvdHlwZSk7XG5cbkRlY29kZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGRlY29kZWQgPSBtc2dwYWNrLmRlY29kZShvYmopO1xuICB0aGlzLmNoZWNrUGFja2V0KGRlY29kZWQpO1xuICB0aGlzLmVtaXQoXCJkZWNvZGVkXCIsIGRlY29kZWQpO1xufTtcblxuZnVuY3Rpb24gaXNEYXRhVmFsaWQoZGVjb2RlZCkge1xuICBzd2l0Y2ggKGRlY29kZWQudHlwZSkge1xuICAgIGNhc2UgUGFja2V0VHlwZS5DT05ORUNUOlxuICAgICAgcmV0dXJuIGRlY29kZWQuZGF0YSA9PT0gdW5kZWZpbmVkIHx8IGlzT2JqZWN0KGRlY29kZWQuZGF0YSk7XG4gICAgY2FzZSBQYWNrZXRUeXBlLkRJU0NPTk5FQ1Q6XG4gICAgICByZXR1cm4gZGVjb2RlZC5kYXRhID09PSB1bmRlZmluZWQ7XG4gICAgY2FzZSBQYWNrZXRUeXBlLkNPTk5FQ1RfRVJST1I6XG4gICAgICByZXR1cm4gaXNTdHJpbmcoZGVjb2RlZC5kYXRhKSB8fCBpc09iamVjdChkZWNvZGVkLmRhdGEpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShkZWNvZGVkLmRhdGEpO1xuICB9XG59XG5cbkRlY29kZXIucHJvdG90eXBlLmNoZWNrUGFja2V0ID0gZnVuY3Rpb24gKGRlY29kZWQpIHtcbiAgdmFyIGlzVHlwZVZhbGlkID1cbiAgICBpc0ludGVnZXIoZGVjb2RlZC50eXBlKSAmJlxuICAgIGRlY29kZWQudHlwZSA+PSBQYWNrZXRUeXBlLkNPTk5FQ1QgJiZcbiAgICBkZWNvZGVkLnR5cGUgPD0gUGFja2V0VHlwZS5DT05ORUNUX0VSUk9SO1xuICBpZiAoIWlzVHlwZVZhbGlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYWNrZXQgdHlwZVwiKTtcbiAgfVxuXG4gIGlmICghaXNTdHJpbmcoZGVjb2RlZC5uc3ApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBuYW1lc3BhY2VcIik7XG4gIH1cblxuICBpZiAoIWlzRGF0YVZhbGlkKGRlY29kZWQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXlsb2FkXCIpO1xuICB9XG5cbiAgdmFyIGlzQWNrVmFsaWQgPSBkZWNvZGVkLmlkID09PSB1bmRlZmluZWQgfHwgaXNJbnRlZ2VyKGRlY29kZWQuaWQpO1xuICBpZiAoIWlzQWNrVmFsaWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBhY2tldCBpZFwiKTtcbiAgfVxufTtcblxuRGVjb2Rlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcbiIsIi8qKlxuICogUGFyc2VzIGFuIFVSSVxuICpcbiAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciByZSA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO1xuXG52YXIgcGFydHMgPSBbXG4gICAgJ3NvdXJjZScsICdwcm90b2NvbCcsICdhdXRob3JpdHknLCAndXNlckluZm8nLCAndXNlcicsICdwYXNzd29yZCcsICdob3N0JywgJ3BvcnQnLCAncmVsYXRpdmUnLCAncGF0aCcsICdkaXJlY3RvcnknLCAnZmlsZScsICdxdWVyeScsICdhbmNob3InXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNldXJpKHN0cikge1xuICAgIHZhciBzcmMgPSBzdHIsXG4gICAgICAgIGIgPSBzdHIuaW5kZXhPZignWycpLFxuICAgICAgICBlID0gc3RyLmluZGV4T2YoJ10nKTtcblxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBiKSArIHN0ci5zdWJzdHJpbmcoYiwgZSkucmVwbGFjZSgvOi9nLCAnOycpICsgc3RyLnN1YnN0cmluZyhlLCBzdHIubGVuZ3RoKTtcbiAgICB9XG5cbiAgICB2YXIgbSA9IHJlLmV4ZWMoc3RyIHx8ICcnKSxcbiAgICAgICAgdXJpID0ge30sXG4gICAgICAgIGkgPSAxNDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgJyc7XG4gICAgfVxuXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICB1cmkuc291cmNlID0gc3JjO1xuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XG4gICAgICAgIHVyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlKC87L2csICc6Jyk7XG4gICAgICAgIHVyaS5pcHY2dXJpID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cmkucGF0aE5hbWVzID0gcGF0aE5hbWVzKHVyaSwgdXJpWydwYXRoJ10pO1xuICAgIHVyaS5xdWVyeUtleSA9IHF1ZXJ5S2V5KHVyaSwgdXJpWydxdWVyeSddKTtcblxuICAgIHJldHVybiB1cmk7XG59O1xuXG5mdW5jdGlvbiBwYXRoTmFtZXMob2JqLCBwYXRoKSB7XG4gICAgdmFyIHJlZ3ggPSAvXFwvezIsOX0vZyxcbiAgICAgICAgbmFtZXMgPSBwYXRoLnJlcGxhY2UocmVneCwgXCIvXCIpLnNwbGl0KFwiL1wiKTtcblxuICAgIGlmIChwYXRoLnN1YnN0cigwLCAxKSA9PSAnLycgfHwgcGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmFtZXMuc3BsaWNlKDAsIDEpO1xuICAgIH1cbiAgICBpZiAocGF0aC5zdWJzdHIocGF0aC5sZW5ndGggLSAxLCAxKSA9PSAnLycpIHtcbiAgICAgICAgbmFtZXMuc3BsaWNlKG5hbWVzLmxlbmd0aCAtIDEsIDEpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lcztcbn1cblxuZnVuY3Rpb24gcXVlcnlLZXkodXJpLCBxdWVyeSkge1xuICAgIHZhciBkYXRhID0ge307XG5cbiAgICBxdWVyeS5yZXBsYWNlKC8oPzpefCYpKFteJj1dKik9PyhbXiZdKikvZywgZnVuY3Rpb24gKCQwLCAkMSwgJDIpIHtcbiAgICAgICAgaWYgKCQxKSB7XG4gICAgICAgICAgICBkYXRhWyQxXSA9ICQyO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYW5hZ2VyID0gdm9pZCAwO1xuY29uc3QgZWlvID0gcmVxdWlyZShcImVuZ2luZS5pby1jbGllbnRcIik7XG5jb25zdCBzb2NrZXRfMSA9IHJlcXVpcmUoXCIuL3NvY2tldFwiKTtcbmNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBwYXJzZXIgPSByZXF1aXJlKFwic29ja2V0LmlvLXBhcnNlclwiKTtcbmNvbnN0IG9uXzEgPSByZXF1aXJlKFwiLi9vblwiKTtcbmNvbnN0IEJhY2tvZmYgPSByZXF1aXJlKFwiYmFja28yXCIpO1xuXG5cbmNsYXNzIE1hbmFnZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uc3BzID0ge307XG4gICAgICAgIHRoaXMuc3VicyA9IFtdO1xuICAgICAgICBpZiAodXJpICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1cmkpIHtcbiAgICAgICAgICAgIG9wdHMgPSB1cmk7XG4gICAgICAgICAgICB1cmkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgICAgIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCBcIi9zb2NrZXQuaW9cIjtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gICAgICAgIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgICAgICAgICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgICAgICAgICBtYXg6IHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgoKSxcbiAgICAgICAgICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKCksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRpbWVvdXQobnVsbCA9PSBvcHRzLnRpbWVvdXQgPyAyMDAwMCA6IG9wdHMudGltZW91dCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgY29uc3QgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgICAgICAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICAgICAgICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gICAgICAgIHRoaXMuX2F1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9hdXRvQ29ubmVjdClcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb24odikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb24gPSAhIXY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb25BdHRlbXB0cyh2KSB7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheSA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1pbih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJhbmRvbWl6YXRpb25GYWN0b3Iodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgICAgICAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEppdHRlcih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5TWF4KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1heCh2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRpbWVvdXQodikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZW91dDtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdHJ5aW5nIHRvIHJlY29ubmVjdCBpZiByZWNvbm5lY3Rpb24gaXMgZW5hYmxlZCBhbmQgd2UgaGF2ZSBub3RcbiAgICAgKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgbWF5YmVSZWNvbm5lY3RPbk9wZW4oKSB7XG4gICAgICAgIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgICAgICAgaWYgKCF0aGlzLl9yZWNvbm5lY3RpbmcgJiZcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbiAmJlxuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgICAgICAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0IGBzb2NrZXRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBvcHRpb25hbCwgY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb3Blbihmbikge1xuXG5cbiAgICAgICAgaWYgKH50aGlzLl9yZWFkeVN0YXRlLmluZGV4T2YoXCJvcGVuXCIpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cblxuICAgICAgICB0aGlzLmVuZ2luZSA9IGVpbyh0aGlzLnVyaSwgdGhpcy5vcHRzKTtcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7XG4gICAgICAgIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlO1xuICAgICAgICAvLyBlbWl0IGBvcGVuYFxuICAgICAgICBjb25zdCBvcGVuU3ViRGVzdHJveSA9IG9uXzEub24oc29ja2V0LCBcIm9wZW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbm9wZW4oKTtcbiAgICAgICAgICAgIGZuICYmIGZuKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBlbWl0IGBlcnJvcmBcbiAgICAgICAgY29uc3QgZXJyb3JTdWIgPSBvbl8xLm9uKHNvY2tldCwgXCJlcnJvclwiLCAoZXJyKSA9PiB7XG5cblxuICAgICAgICAgICAgc2VsZi5jbGVhbnVwKCk7XG4gICAgICAgICAgICBzZWxmLl9yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgICAgIHN1cGVyLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgZm4oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgc2VsZi5tYXliZVJlY29ubmVjdE9uT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcblxuXG4gICAgICAgICAgICBpZiAodGltZW91dCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG9wZW5TdWJEZXN0cm95KCk7IC8vIHByZXZlbnRzIGEgcmFjZSBjb25kaXRpb24gd2l0aCB0aGUgJ29wZW4nIGV2ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzZXQgdGltZXJcbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG5cblxuICAgICAgICAgICAgICAgIG9wZW5TdWJEZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgc29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoXCJlcnJvclwiLCBuZXcgRXJyb3IoXCJ0aW1lb3V0XCIpKTtcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5zdWJzLnB1c2goZnVuY3Rpb24gc3ViRGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWJzLnB1c2gob3BlblN1YkRlc3Ryb3kpO1xuICAgICAgICB0aGlzLnN1YnMucHVzaChlcnJvclN1Yik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3Igb3BlbigpXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29ubmVjdChmbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVuKGZuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ub3BlbigpIHtcblxuXG4gICAgICAgIC8vIGNsZWFyIG9sZCBzdWJzXG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAvLyBtYXJrIGFzIG9wZW5cbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICBzdXBlci5lbWl0KFwib3BlblwiKTtcbiAgICAgICAgLy8gYWRkIG5ldyBzdWJzXG4gICAgICAgIGNvbnN0IHNvY2tldCA9IHRoaXMuZW5naW5lO1xuICAgICAgICB0aGlzLnN1YnMucHVzaChvbl8xLm9uKHNvY2tldCwgXCJwaW5nXCIsIHRoaXMub25waW5nLmJpbmQodGhpcykpLCBvbl8xLm9uKHNvY2tldCwgXCJkYXRhXCIsIHRoaXMub25kYXRhLmJpbmQodGhpcykpLCBvbl8xLm9uKHNvY2tldCwgXCJlcnJvclwiLCB0aGlzLm9uZXJyb3IuYmluZCh0aGlzKSksIG9uXzEub24oc29ja2V0LCBcImNsb3NlXCIsIHRoaXMub25jbG9zZS5iaW5kKHRoaXMpKSwgb25fMS5vbih0aGlzLmRlY29kZXIsIFwiZGVjb2RlZFwiLCB0aGlzLm9uZGVjb2RlZC5iaW5kKHRoaXMpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgcGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25waW5nKCkge1xuICAgICAgICBzdXBlci5lbWl0KFwicGluZ1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggZGF0YS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25kYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kZWNvZGVyLmFkZChkYXRhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gcGFyc2VyIGZ1bGx5IGRlY29kZXMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZGVjb2RlZChwYWNrZXQpIHtcbiAgICAgICAgc3VwZXIuZW1pdChcInBhY2tldFwiLCBwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZXJyb3IoZXJyKSB7XG5cblxuICAgICAgICBzdXBlci5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzb2NrZXQgZm9yIHRoZSBnaXZlbiBgbnNwYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NvY2tldH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc29ja2V0KG5zcCwgb3B0cykge1xuICAgICAgICBsZXQgc29ja2V0ID0gdGhpcy5uc3BzW25zcF07XG4gICAgICAgIGlmICghc29ja2V0KSB7XG4gICAgICAgICAgICBzb2NrZXQgPSBuZXcgc29ja2V0XzEuU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgICAgICAgICB0aGlzLm5zcHNbbnNwXSA9IHNvY2tldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc29ja2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzb2NrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9kZXN0cm95KHNvY2tldCkge1xuICAgICAgICBjb25zdCBuc3BzID0gT2JqZWN0LmtleXModGhpcy5uc3BzKTtcbiAgICAgICAgZm9yIChjb25zdCBuc3Agb2YgbnNwcykge1xuICAgICAgICAgICAgY29uc3Qgc29ja2V0ID0gdGhpcy5uc3BzW25zcF07XG4gICAgICAgICAgICBpZiAoc29ja2V0LmFjdGl2ZSkge1xuXG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIGEgcGFja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3BhY2tldChwYWNrZXQpIHtcblxuXG4gICAgICAgIGlmIChwYWNrZXQucXVlcnkgJiYgcGFja2V0LnR5cGUgPT09IDApXG4gICAgICAgICAgICBwYWNrZXQubnNwICs9IFwiP1wiICsgcGFja2V0LnF1ZXJ5O1xuICAgICAgICBjb25zdCBlbmNvZGVkUGFja2V0cyA9IHRoaXMuZW5jb2Rlci5lbmNvZGUocGFja2V0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5lbmdpbmUud3JpdGUoZW5jb2RlZFBhY2tldHNbaV0sIHBhY2tldC5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY2xlYW51cCgpIHtcblxuXG4gICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xuICAgICAgICB0aGlzLnN1YnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2xvc2UoKSB7XG5cblxuICAgICAgICB0aGlzLnNraXBSZWNvbm5lY3QgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLl9yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICAvLyBgb25jbG9zZWAgd2lsbCBub3QgZmlyZSBiZWNhdXNlXG4gICAgICAgICAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIGlmICh0aGlzLmVuZ2luZSlcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLmNsb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBjbG9zZSgpXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgY2xvc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY2xvc2UocmVhc29uKSB7XG5cblxuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICBzdXBlci5lbWl0KFwiY2xvc2VcIiwgcmVhc29uKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGVtcHQgYSByZWNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHtcblxuXG4gICAgICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgICAgIHN1cGVyLmVtaXQoXCJyZWNvbm5lY3RfZmFpbGVkXCIpO1xuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuXG5cbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuXG4gICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcInJlY29ubmVjdF9hdHRlbXB0XCIsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgYWdhaW4gZm9yIHRoZSBjYXNlIHNvY2tldCBjbG9zZWQgaW4gYWJvdmUgZXZlbnRzXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNlbGYub3BlbigoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlci5lbWl0KFwicmVjb25uZWN0X2Vycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vbnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaChmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlY29ubmVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25yZWNvbm5lY3QoKSB7XG4gICAgICAgIGNvbnN0IGF0dGVtcHQgPSB0aGlzLmJhY2tvZmYuYXR0ZW1wdHM7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgc3VwZXIuZW1pdChcInJlY29ubmVjdFwiLCBhdHRlbXB0KTtcbiAgICB9XG59XG5leHBvcnRzLk1hbmFnZXIgPSBNYW5hZ2VyO1xuIiwiY29uc3Qgd2Vic29ja2V0ID0gcmVxdWlyZShcIi4vd3gtd2Vic29ja2V0XCIpO1xuZXhwb3J0cy53ZWJzb2NrZXQgPSB3ZWJzb2NrZXQ7IiwiY29uc3QgcGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuXG5jbGFzcyBUcmFuc3BvcnQgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgLyoqXG4gICAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiXCI7XG4gICAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0cyBhbiBlcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgb25FcnJvcihtc2csIGRlc2MpIHtcbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgICBlcnIudHlwZSA9IFwiVHJhbnNwb3J0RXJyb3JcIjtcbiAgICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIHRyYW5zcG9ydC5cbiAgICpcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIlwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiO1xuICAgICAgdGhpcy5kb09wZW4oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIG11bHRpcGxlIHBhY2tldHMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBzZW5kKHBhY2tldHMpIHtcbiAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy53cml0ZShwYWNrZXRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNwb3J0IG5vdCBvcGVuXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBvcGVuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25PcGVuKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgIHRoaXMuZW1pdChcIm9wZW5cIik7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdpdGggZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkRhdGEoZGF0YSkge1xuICAgIGNvbnN0IHBhY2tldCA9IHBhcnNlci5kZWNvZGVQYWNrZXQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSk7XG4gICAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gICAqL1xuICBvblBhY2tldChwYWNrZXQpIHtcbiAgICB0aGlzLmVtaXQoXCJwYWNrZXRcIiwgcGFja2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkNsb3NlKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgdGhpcy5lbWl0KFwiY2xvc2VcIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG4iLCJjb25zdCBQQUNLRVRfVFlQRVMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBubyBNYXAgPSBubyBwb2x5ZmlsbFxuUEFDS0VUX1RZUEVTW1wib3BlblwiXSA9IFwiMFwiO1xuUEFDS0VUX1RZUEVTW1wiY2xvc2VcIl0gPSBcIjFcIjtcblBBQ0tFVF9UWVBFU1tcInBpbmdcIl0gPSBcIjJcIjtcblBBQ0tFVF9UWVBFU1tcInBvbmdcIl0gPSBcIjNcIjtcblBBQ0tFVF9UWVBFU1tcIm1lc3NhZ2VcIl0gPSBcIjRcIjtcblBBQ0tFVF9UWVBFU1tcInVwZ3JhZGVcIl0gPSBcIjVcIjtcblBBQ0tFVF9UWVBFU1tcIm5vb3BcIl0gPSBcIjZcIjtcblxuY29uc3QgUEFDS0VUX1RZUEVTX1JFVkVSU0UgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuT2JqZWN0LmtleXMoUEFDS0VUX1RZUEVTKS5mb3JFYWNoKGtleSA9PiB7XG4gIFBBQ0tFVF9UWVBFU19SRVZFUlNFW1BBQ0tFVF9UWVBFU1trZXldXSA9IGtleTtcbn0pO1xuXG5jb25zdCBFUlJPUl9QQUNLRVQgPSB7IHR5cGU6IFwiZXJyb3JcIiwgZGF0YTogXCJwYXJzZXIgZXJyb3JcIiB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUEFDS0VUX1RZUEVTLFxuICBQQUNLRVRfVFlQRVNfUkVWRVJTRSxcbiAgRVJST1JfUEFDS0VUXG59O1xuIiwiLyoqXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHN0ciA9ICcnO1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0ciArPSAnJic7XG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUGFyc2VzIGEgc2ltcGxlIHF1ZXJ5c3RyaW5nIGludG8gYW4gb2JqZWN0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHFzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKHFzKXtcbiAgdmFyIHFyeSA9IHt9O1xuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgfVxuICByZXR1cm4gcXJ5O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Tb2NrZXQgPSB2b2lkIDA7XG5jb25zdCBzb2NrZXRfaW9fcGFyc2VyXzEgPSByZXF1aXJlKFwic29ja2V0LmlvLXBhcnNlclwiKTtcbmNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBvbl8xID0gcmVxdWlyZShcIi4vb25cIik7XG5cblxuLyoqXG4gKiBJbnRlcm5hbCBldmVudHMuXG4gKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci5cbiAqL1xuY29uc3QgUkVTRVJWRURfRVZFTlRTID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgY29ubmVjdDogMSxcbiAgICBjb25uZWN0X2Vycm9yOiAxLFxuICAgIGRpc2Nvbm5lY3Q6IDEsXG4gICAgZGlzY29ubmVjdGluZzogMSxcbiAgICAvLyBFdmVudEVtaXR0ZXIgcmVzZXJ2ZWQgZXZlbnRzOiBodHRwczovL25vZGVqcy5vcmcvYXBpL2V2ZW50cy5odG1sI2V2ZW50c19ldmVudF9uZXdsaXN0ZW5lclxuICAgIG5ld0xpc3RlbmVyOiAxLFxuICAgIHJlbW92ZUxpc3RlbmVyOiAxLFxufSk7XG5jbGFzcyBTb2NrZXQgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBgU29ja2V0YCBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpbywgbnNwLCBvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaWRzID0gMDtcbiAgICAgICAgdGhpcy5hY2tzID0ge307XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5mbGFncyA9IHt9O1xuICAgICAgICB0aGlzLmlvID0gaW87XG4gICAgICAgIHRoaXMubnNwID0gbnNwO1xuICAgICAgICB0aGlzLmlkcyA9IDA7XG4gICAgICAgIHRoaXMuYWNrcyA9IHt9O1xuICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5mbGFncyA9IHt9O1xuICAgICAgICBpZiAob3B0cyAmJiBvcHRzLmF1dGgpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aCA9IG9wdHMuYXV0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pby5fYXV0b0Nvbm5lY3QpXG4gICAgICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRvIG9wZW4sIGNsb3NlIGFuZCBwYWNrZXQgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHN1YkV2ZW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMuc3VicylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgaW8gPSB0aGlzLmlvO1xuICAgICAgICB0aGlzLnN1YnMgPSBbXG4gICAgICAgICAgICBvbl8xLm9uKGlvLCBcIm9wZW5cIiwgdGhpcy5vbm9wZW4uYmluZCh0aGlzKSksXG4gICAgICAgICAgICBvbl8xLm9uKGlvLCBcInBhY2tldFwiLCB0aGlzLm9ucGFja2V0LmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb25fMS5vbihpbywgXCJjbG9zZVwiLCB0aGlzLm9uY2xvc2UuYmluZCh0aGlzKSksXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIFNvY2tldCB3aWxsIHRyeSB0byByZWNvbm5lY3Qgd2hlbiBpdHMgTWFuYWdlciBjb25uZWN0cyBvciByZWNvbm5lY3RzXG4gICAgICovXG4gICAgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zdWJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5zdWJFdmVudHMoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlvW1wiX3JlY29ubmVjdGluZ1wiXSlcbiAgICAgICAgICAgIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMuaW8uX3JlYWR5U3RhdGUpXG4gICAgICAgICAgICB0aGlzLm9ub3BlbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGNvbm5lY3QoKVxuICAgICAqL1xuICAgIG9wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2VuZCguLi5hcmdzKSB7XG4gICAgICAgIGFyZ3MudW5zaGlmdChcIm1lc3NhZ2VcIik7XG4gICAgICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGBlbWl0YC5cbiAgICAgKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldiAtIGV2ZW50IG5hbWVcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZW1pdChldiwgLi4uYXJncykge1xuICAgICAgICBpZiAoUkVTRVJWRURfRVZFTlRTLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBldiArICdcIiBpcyBhIHJlc2VydmVkIGV2ZW50IG5hbWUnKTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnVuc2hpZnQoZXYpO1xuICAgICAgICBjb25zdCBwYWNrZXQgPSB7XG4gICAgICAgICAgICB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5FVkVOVCxcbiAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgIH07XG4gICAgICAgIHBhY2tldC5vcHRpb25zID0ge307XG4gICAgICAgIHBhY2tldC5vcHRpb25zLmNvbXByZXNzID0gdGhpcy5mbGFncy5jb21wcmVzcyAhPT0gZmFsc2U7XG4gICAgICAgIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG5cblxuICAgICAgICAgICAgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgICAgICAgICBwYWNrZXQuaWQgPSB0aGlzLmlkcysrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzVHJhbnNwb3J0V3JpdGFibGUgPSB0aGlzLmlvLmVuZ2luZSAmJlxuICAgICAgICAgICAgdGhpcy5pby5lbmdpbmUudHJhbnNwb3J0ICYmXG4gICAgICAgICAgICB0aGlzLmlvLmVuZ2luZS50cmFuc3BvcnQud3JpdGFibGU7XG4gICAgICAgIGNvbnN0IGRpc2NhcmRQYWNrZXQgPSB0aGlzLmZsYWdzLnZvbGF0aWxlICYmICghaXNUcmFuc3BvcnRXcml0YWJsZSB8fCAhdGhpcy5jb25uZWN0ZWQpO1xuICAgICAgICBpZiAoZGlzY2FyZFBhY2tldCkge1xuXG5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5wYWNrZXQocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mbGFncyA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwYWNrZXQocGFja2V0KSB7XG4gICAgICAgIHBhY2tldC5uc3AgPSB0aGlzLm5zcDtcbiAgICAgICAgdGhpcy5pby5fcGFja2V0KHBhY2tldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVuZ2luZSBgb3BlbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ub3BlbigpIHtcblxuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5hdXRoID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5hdXRoKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5DT05ORUNULCBkYXRhIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkNPTk5FQ1QsIGRhdGE6IHRoaXMuYXV0aCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWFzb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY2xvc2UocmVhc29uKSB7XG5cblxuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmlkO1xuICAgICAgICBzdXBlci5lbWl0KFwiZGlzY29ubmVjdFwiLCByZWFzb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBzb2NrZXQgcGFja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25wYWNrZXQocGFja2V0KSB7XG4gICAgICAgIGNvbnN0IHNhbWVOYW1lc3BhY2UgPSBwYWNrZXQubnNwID09PSB0aGlzLm5zcDtcbiAgICAgICAgaWYgKCFzYW1lTmFtZXNwYWNlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkNPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldC5kYXRhICYmIHBhY2tldC5kYXRhLnNpZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHBhY2tldC5kYXRhLnNpZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNvbm5lY3QoaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcImNvbm5lY3RfZXJyb3JcIiwgbmV3IEVycm9yKFwiSXQgc2VlbXMgeW91IGFyZSB0cnlpbmcgdG8gcmVhY2ggYSBTb2NrZXQuSU8gc2VydmVyIGluIHYyLnggd2l0aCBhIHYzLnggY2xpZW50LCBidXQgdGhleSBhcmUgbm90IGNvbXBhdGlibGUgKG1vcmUgaW5mb3JtYXRpb24gaGVyZTogaHR0cHM6Ly9zb2NrZXQuaW8vZG9jcy92My9taWdyYXRpbmctZnJvbS0yLXgtdG8tMy0wLylcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuRVZFTlQ6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkJJTkFSWV9FVkVOVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQUNLOlxuICAgICAgICAgICAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQklOQVJZX0FDSzpcbiAgICAgICAgICAgICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkRJU0NPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQ09OTkVDVF9FUlJPUjpcbiAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IocGFja2V0LmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGVyci5kYXRhID0gcGFja2V0LmRhdGEuZGF0YTtcbiAgICAgICAgICAgICAgICBzdXBlci5lbWl0KFwiY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25ldmVudChwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuXG5cbiAgICAgICAgaWYgKG51bGwgIT0gcGFja2V0LmlkKSB7XG5cblxuICAgICAgICAgICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQoYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChPYmplY3QuZnJlZXplKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbWl0RXZlbnQoYXJncykge1xuICAgICAgICBpZiAodGhpcy5fYW55TGlzdGVuZXJzICYmIHRoaXMuX2FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycy5zbGljZSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBlci5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhbiBhY2sgY2FsbGJhY2sgdG8gZW1pdCB3aXRoIGFuIGV2ZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBhY2soaWQpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBzZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgICAgICAgICBpZiAoc2VudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzZW50ID0gdHJ1ZTtcblxuXG4gICAgICAgICAgICBzZWxmLnBhY2tldCh7XG4gICAgICAgICAgICAgICAgdHlwZTogc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQUNLLFxuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25hY2socGFja2V0KSB7XG4gICAgICAgIGNvbnN0IGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWNrKSB7XG5cblxuICAgICAgICAgICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcblxuXG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc2VydmVyIGNvbm5lY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY29ubmVjdChpZCkge1xuXG5cbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHN1cGVyLmVtaXQoXCJjb25uZWN0XCIpO1xuICAgICAgICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBlbWl0QnVmZmVyZWQoKSB7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5mb3JFYWNoKChhcmdzKSA9PiB0aGlzLmVtaXRFdmVudChhcmdzKSk7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIuZm9yRWFjaCgocGFja2V0KSA9PiB0aGlzLnBhY2tldChwYWNrZXQpKTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRpc2Nvbm5lY3QoKSB7XG5cblxuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5vbmNsb3NlKFwiaW8gc2VydmVyIGRpc2Nvbm5lY3RcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGZvcmNlZCBjbGllbnQvc2VydmVyIHNpZGUgZGlzY29ubmVjdGlvbnMsXG4gICAgICogdGhpcyBtZXRob2QgZW5zdXJlcyB0aGUgbWFuYWdlciBzdG9wcyB0cmFja2luZyB1cyBhbmRcbiAgICAgKiB0aGF0IHJlY29ubmVjdGlvbnMgZG9uJ3QgZ2V0IHRyaWdnZXJlZCBmb3IgdGhpcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vicykge1xuICAgICAgICAgICAgLy8gY2xlYW4gc3Vic2NyaXB0aW9ucyB0byBhdm9pZCByZWNvbm5lY3Rpb25zXG4gICAgICAgICAgICB0aGlzLnN1YnMuZm9yRWFjaCgoc3ViRGVzdHJveSkgPT4gc3ViRGVzdHJveSgpKTtcbiAgICAgICAgICAgIHRoaXMuc3VicyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlvW1wiX2Rlc3Ryb3lcIl0odGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgbWFudWFsbHkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG5cblxuICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5ESVNDT05ORUNUIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBjbGllbnQgZGlzY29ubmVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGRpc2Nvbm5lY3QoKVxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcHJlc3MgLSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb21wcmVzcyhjb21wcmVzcykge1xuICAgICAgICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbW9kaWZpZXIgZm9yIGEgc3Vic2VxdWVudCBldmVudCBlbWlzc2lvbiB0aGF0IHRoZSBldmVudCBtZXNzYWdlIHdpbGwgYmUgZHJvcHBlZCB3aGVuIHRoaXMgc29ja2V0IGlzIG5vdFxuICAgICAqIHJlYWR5IHRvIHNlbmQgbWVzc2FnZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldCB2b2xhdGlsZSgpIHtcbiAgICAgICAgdGhpcy5mbGFncy52b2xhdGlsZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb25BbnkobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suIFRoZSBsaXN0ZW5lciBpcyBhZGRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcHJlcGVuZEFueShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMgfHwgW107XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIGFueSBldmVudCBpcyBlbWl0dGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpc3RlbmVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIG9mZkFueShsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXRoaXMuX2FueUxpc3RlbmVycykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lciA9PT0gbGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FueUxpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0aGF0IGFyZSBsaXN0ZW5pbmcgZm9yIGFueSBldmVudCB0aGF0IGlzIHNwZWNpZmllZC4gVGhpcyBhcnJheSBjYW4gYmUgbWFuaXB1bGF0ZWQsXG4gICAgICogZS5nLiB0byByZW1vdmUgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGxpc3RlbmVyc0FueSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICB9XG59XG5leHBvcnRzLlNvY2tldCA9IFNvY2tldDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vbiA9IHZvaWQgMDtcbmZ1bmN0aW9uIG9uKG9iaiwgZXYsIGZuKSB7XG4gICAgb2JqLm9uKGV2LCBmbik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgIG9iai5vZmYoZXYsIGZuKTtcbiAgICB9O1xufVxuZXhwb3J0cy5vbiA9IG9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNvY2tldCA9IGV4cG9ydHMuaW8gPSBleHBvcnRzLk1hbmFnZXIgPSBleHBvcnRzLnByb3RvY29sID0gdm9pZCAwO1xuY29uc3QgdXJsXzEgPSByZXF1aXJlKFwiLi91cmxcIik7XG5jb25zdCBtYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi9tYW5hZ2VyXCIpO1xuY29uc3Qgc29ja2V0XzEgPSByZXF1aXJlKFwiLi9zb2NrZXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTb2NrZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvY2tldF8xLlNvY2tldDsgfSB9KTtcblxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBsb29rdXA7XG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5jb25zdCBjYWNoZSA9IChleHBvcnRzLm1hbmFnZXJzID0ge30pO1xuZnVuY3Rpb24gbG9va3VwKHVyaSwgb3B0cykge1xuICAgIGlmICh0eXBlb2YgdXJpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG9wdHMgPSB1cmk7XG4gICAgICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgY29uc3QgcGFyc2VkID0gdXJsXzEudXJsKHVyaSk7XG4gICAgY29uc3Qgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgICBjb25zdCBpZCA9IHBhcnNlZC5pZDtcbiAgICBjb25zdCBwYXRoID0gcGFyc2VkLnBhdGg7XG4gICAgY29uc3Qgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXVtcIm5zcHNcIl07XG4gICAgY29uc3QgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHxcbiAgICAgICAgb3B0c1tcImZvcmNlIG5ldyBjb25uZWN0aW9uXCJdIHx8XG4gICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fFxuICAgICAgICBzYW1lTmFtZXNwYWNlO1xuICAgIGxldCBpbztcbiAgICBpZiAobmV3Q29ubmVjdGlvbikge1xuXG5cbiAgICAgICAgaW8gPSBuZXcgbWFuYWdlcl8xLk1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghY2FjaGVbaWRdKSB7XG5cblxuICAgICAgICAgICAgY2FjaGVbaWRdID0gbmV3IG1hbmFnZXJfMS5NYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaW8gPSBjYWNoZVtpZF07XG4gICAgfVxuICAgIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICAgICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgICB9XG4gICAgcmV0dXJuIGlvLnNvY2tldChwYXJzZWQucGF0aCwgb3B0cyk7XG59XG5leHBvcnRzLmlvID0gbG9va3VwO1xuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIHNvY2tldF9pb19wYXJzZXJfMSA9IHJlcXVpcmUoXCJzb2NrZXQuaW8tcGFyc2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHJvdG9jb2xcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvY2tldF9pb19wYXJzZXJfMS5wcm90b2NvbDsgfSB9KTtcbi8qKlxuICogYGNvbm5lY3RgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5jb25uZWN0ID0gbG9va3VwO1xuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIG1hbmFnZXJfMiA9IHJlcXVpcmUoXCIuL21hbmFnZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNYW5hZ2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYW5hZ2VyXzIuTWFuYWdlcjsgfSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51cmwgPSB2b2lkIDA7XG5jb25zdCBwYXJzZXVyaSA9IHJlcXVpcmUoXCJwYXJzZXVyaVwiKTtcblxuXG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHVyaSAtIHVybFxuICogQHBhcmFtIGxvYyAtIEFuIG9iamVjdCBtZWFudCB0byBtaW1pYyB3aW5kb3cubG9jYXRpb24uXG4gKiAgICAgICAgRGVmYXVsdHMgdG8gd2luZG93LmxvY2F0aW9uLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1cmwodXJpLCBsb2MpIHtcbiAgICBsZXQgb2JqID0gdXJpO1xuICAgIC8vIGRlZmF1bHQgdG8gd2luZG93LmxvY2F0aW9uXG4gICAgbG9jID0gbG9jIHx8ICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgbG9jYXRpb24pO1xuICAgIGlmIChudWxsID09IHVyaSlcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgbG9jLmhvc3Q7XG4gICAgLy8gcmVsYXRpdmUgcGF0aCBzdXBwb3J0XG4gICAgaWYgKHR5cGVvZiB1cmkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKFwiL1wiID09PSB1cmkuY2hhckF0KDApKSB7XG4gICAgICAgICAgICBpZiAoXCIvXCIgPT09IHVyaS5jaGFyQXQoMSkpIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuXG5cbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gXCJodHRwczovL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHBhcnNlXG5cblxuICAgICAgICBvYmogPSBwYXJzZXVyaSh1cmkpO1xuICAgIH1cbiAgICAvLyBtYWtlIHN1cmUgd2UgdHJlYXQgYGxvY2FsaG9zdDo4MGAgYW5kIGBsb2NhbGhvc3RgIGVxdWFsbHlcbiAgICBpZiAoIW9iai5wb3J0KSB7XG4gICAgICAgIGlmICgvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgICAgICAgb2JqLnBvcnQgPSBcIjgwXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoL14oaHR0cHx3cylzJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICAgICAgICBvYmoucG9ydCA9IFwiNDQzXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCBcIi9cIjtcbiAgICBjb25zdCBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZihcIjpcIikgIT09IC0xO1xuICAgIGNvbnN0IGhvc3QgPSBpcHY2ID8gXCJbXCIgKyBvYmouaG9zdCArIFwiXVwiIDogb2JqLmhvc3Q7XG4gICAgLy8gZGVmaW5lIHVuaXF1ZSBpZFxuICAgIG9iai5pZCA9IG9iai5wcm90b2NvbCArIFwiOi8vXCIgKyBob3N0ICsgXCI6XCIgKyBvYmoucG9ydDtcbiAgICAvLyBkZWZpbmUgaHJlZlxuICAgIG9iai5ocmVmID1cbiAgICAgICAgb2JqLnByb3RvY29sICtcbiAgICAgICAgICAgIFwiOi8vXCIgK1xuICAgICAgICAgICAgaG9zdCArXG4gICAgICAgICAgICAobG9jICYmIGxvYy5wb3J0ID09PSBvYmoucG9ydCA/IFwiXCIgOiBcIjpcIiArIG9iai5wb3J0KTtcbiAgICByZXR1cm4gb2JqO1xufVxuZXhwb3J0cy51cmwgPSB1cmw7XG4iLCJjb25zdCBTb2NrZXQgPSByZXF1aXJlKFwiLi9zb2NrZXRcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gKHVyaSwgb3B0cykgPT4gbmV3IFNvY2tldCh1cmksIG9wdHMpO1xuXG4vKipcbiAqIEV4cG9zZSBkZXBzIGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eVxuICogYW5kIHN0YW5kYWxvbmUgYnJvd3NlciBhY2Nlc3MuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMuU29ja2V0ID0gU29ja2V0O1xubW9kdWxlLmV4cG9ydHMucHJvdG9jb2wgPSBTb2NrZXQucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5tb2R1bGUuZXhwb3J0cy5UcmFuc3BvcnQgPSByZXF1aXJlKFwiLi90cmFuc3BvcnRcIik7XG5tb2R1bGUuZXhwb3J0cy50cmFuc3BvcnRzID0gcmVxdWlyZShcIi4vdHJhbnNwb3J0cy9pbmRleFwiKTtcbm1vZHVsZS5leHBvcnRzLnBhcnNlciA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuIiwiY29uc3QgdHJhbnNwb3J0cyA9IHJlcXVpcmUoXCIuL3RyYW5zcG9ydHMvaW5kZXhcIik7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuXG5cbmNvbnN0IHBhcnNlciA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuY29uc3QgcGFyc2V1cmkgPSByZXF1aXJlKFwicGFyc2V1cmlcIik7XG5jb25zdCBwYXJzZXFzID0gcmVxdWlyZShcInBhcnNlcXNcIik7XG5cbmNsYXNzIFNvY2tldCBleHRlbmRzIEVtaXR0ZXIge1xuICAvKipcbiAgICogU29ja2V0IGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHVyaSBvciBvcHRpb25zXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih1cmksIG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBpZiAodXJpICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1cmkpIHtcbiAgICAgIG9wdHMgPSB1cmk7XG4gICAgICB1cmkgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh1cmkpIHtcbiAgICAgIHVyaSA9IHBhcnNldXJpKHVyaSk7XG4gICAgICBvcHRzLmhvc3RuYW1lID0gdXJpLmhvc3Q7XG4gICAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gXCJodHRwc1wiIHx8IHVyaS5wcm90b2NvbCA9PT0gXCJ3c3NcIjtcbiAgICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgICAgaWYgKHVyaS5xdWVyeSkgb3B0cy5xdWVyeSA9IHVyaS5xdWVyeTtcbiAgICB9IGVsc2UgaWYgKG9wdHMuaG9zdCkge1xuICAgICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgICB9XG5cbiAgICB0aGlzLnNlY3VyZSA9XG4gICAgICBudWxsICE9IG9wdHMuc2VjdXJlXG4gICAgICAgID8gb3B0cy5zZWN1cmVcbiAgICAgICAgOiB0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgXCJodHRwczpcIiA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG5cbiAgICBpZiAob3B0cy5ob3N0bmFtZSAmJiAhb3B0cy5wb3J0KSB7XG4gICAgICAvLyBpZiBubyBwb3J0IGlzIHNwZWNpZmllZCBtYW51YWxseSwgdXNlIHRoZSBwcm90b2NvbCBkZWZhdWx0XG4gICAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/IFwiNDQzXCIgOiBcIjgwXCI7XG4gICAgfVxuXG4gICAgdGhpcy5ob3N0bmFtZSA9XG4gICAgICBvcHRzLmhvc3RuYW1lIHx8XG4gICAgICAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiID8gbG9jYXRpb24uaG9zdG5hbWUgOiBcImxvY2FsaG9zdFwiKTtcbiAgICB0aGlzLnBvcnQgPVxuICAgICAgb3B0cy5wb3J0IHx8XG4gICAgICAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIGxvY2F0aW9uLnBvcnRcbiAgICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICAgIDogdGhpcy5zZWN1cmVcbiAgICAgICAgPyA0NDNcbiAgICAgICAgOiA4MCk7XG5cbiAgICB0aGlzLnRyYW5zcG9ydHMgPSBvcHRzLnRyYW5zcG9ydHMgfHwgW1wicG9sbGluZ1wiLCBcIndlYnNvY2tldFwiXTtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIlwiO1xuICAgIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gICAgdGhpcy5vcHRzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgcGF0aDogXCIvZW5naW5lLmlvXCIsXG4gICAgICAgIGFnZW50OiBmYWxzZSxcbiAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZSxcbiAgICAgICAgdXBncmFkZTogdHJ1ZSxcbiAgICAgICAganNvbnA6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcFBhcmFtOiBcInRcIixcbiAgICAgICAgcmVtZW1iZXJVcGdyYWRlOiBmYWxzZSxcbiAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiB0cnVlLFxuICAgICAgICBwZXJNZXNzYWdlRGVmbGF0ZToge1xuICAgICAgICAgIHRocmVzaG9sZDogMTAyNFxuICAgICAgICB9LFxuICAgICAgICB0cmFuc3BvcnRPcHRpb25zOiB7fVxuICAgICAgfSxcbiAgICAgIG9wdHNcbiAgICApO1xuXG4gICAgdGhpcy5vcHRzLnBhdGggPSB0aGlzLm9wdHMucGF0aC5yZXBsYWNlKC9cXC8kLywgXCJcIikgKyBcIi9cIjtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRzLnF1ZXJ5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLm9wdHMucXVlcnkgPSBwYXJzZXFzLmRlY29kZSh0aGlzLm9wdHMucXVlcnkpO1xuICAgIH1cblxuICAgIC8vIHNldCBvbiBoYW5kc2hha2VcbiAgICB0aGlzLmlkID0gbnVsbDtcbiAgICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgICB0aGlzLnBpbmdJbnRlcnZhbCA9IG51bGw7XG4gICAgdGhpcy5waW5nVGltZW91dCA9IG51bGw7XG5cbiAgICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gICAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gbnVsbDtcblxuICAgIHRoaXMub3BlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAgICogQHJldHVybiB7VHJhbnNwb3J0fVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNyZWF0ZVRyYW5zcG9ydChuYW1lKSB7XG5cblxuICAgIGNvbnN0IHF1ZXJ5ID0gY2xvbmUodGhpcy5vcHRzLnF1ZXJ5KTtcblxuICAgIC8vIGFwcGVuZCBlbmdpbmUuaW8gcHJvdG9jb2wgaWRlbnRpZmllclxuICAgIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAgIC8vIHRyYW5zcG9ydCBuYW1lXG4gICAgcXVlcnkudHJhbnNwb3J0ID0gbmFtZTtcblxuICAgIC8vIHNlc3Npb24gaWQgaWYgd2UgYWxyZWFkeSBoYXZlIG9uZVxuICAgIGlmICh0aGlzLmlkKSBxdWVyeS5zaWQgPSB0aGlzLmlkO1xuXG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHRoaXMub3B0cy50cmFuc3BvcnRPcHRpb25zW25hbWVdLFxuICAgICAgdGhpcy5vcHRzLFxuICAgICAge1xuICAgICAgICBxdWVyeSxcbiAgICAgICAgc29ja2V0OiB0aGlzLFxuICAgICAgICBob3N0bmFtZTogdGhpcy5ob3N0bmFtZSxcbiAgICAgICAgc2VjdXJlOiB0aGlzLnNlY3VyZSxcbiAgICAgICAgcG9ydDogdGhpcy5wb3J0XG4gICAgICB9XG4gICAgKTtcblxuXG5cblxuICAgIHJldHVybiBuZXcgdHJhbnNwb3J0c1tuYW1lXShvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb3BlbigpIHtcbiAgICBsZXQgdHJhbnNwb3J0O1xuICAgIGlmIChcbiAgICAgIHRoaXMub3B0cy5yZW1lbWJlclVwZ3JhZGUgJiZcbiAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiZcbiAgICAgIHRoaXMudHJhbnNwb3J0cy5pbmRleE9mKFwid2Vic29ja2V0XCIpICE9PSAtMVxuICAgICkge1xuICAgICAgdHJhbnNwb3J0ID0gXCJ3ZWJzb2NrZXRcIjtcbiAgICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAgIC8vIEVtaXQgZXJyb3Igb24gbmV4dCB0aWNrIHNvIGl0IGNhbiBiZSBsaXN0ZW5lZCB0b1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBcIk5vIHRyYW5zcG9ydHMgYXZhaWxhYmxlXCIpO1xuICAgICAgfSwgMCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgICB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7XG5cbiAgICAvLyBSZXRyeSB3aXRoIHRoZSBuZXh0IHRyYW5zcG9ydCBpZiB0aGUgdHJhbnNwb3J0IGlzIGRpc2FibGVkIChqc29ucDogZmFsc2UpXG4gICAgdHJ5IHtcbiAgICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgfSBjYXRjaCAoZSkge1xuXG5cbiAgICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0LiBEaXNhYmxlcyB0aGUgZXhpc3Rpbmcgb25lIChpZiBhbnkpLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHNldFRyYW5zcG9ydCh0cmFuc3BvcnQpIHtcblxuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcblxuXG4gICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG5cbiAgICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICAgIHRyYW5zcG9ydFxuICAgICAgLm9uKFwiZHJhaW5cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYub25EcmFpbigpO1xuICAgICAgfSlcbiAgICAgIC5vbihcInBhY2tldFwiLCBmdW5jdGlvbihwYWNrZXQpIHtcbiAgICAgICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICAgICAgfSlcbiAgICAgIC5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKGUpO1xuICAgICAgfSlcbiAgICAgIC5vbihcImNsb3NlXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLm9uQ2xvc2UoXCJ0cmFuc3BvcnQgY2xvc2VcIik7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9iZXMgYSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHByb2JlKG5hbWUpIHtcblxuXG4gICAgbGV0IHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUsIHsgcHJvYmU6IDEgfSk7XG4gICAgbGV0IGZhaWxlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuKCkge1xuICAgICAgaWYgKHNlbGYub25seUJpbmFyeVVwZ3JhZGVzKSB7XG4gICAgICAgIGNvbnN0IHVwZ3JhZGVMb3Nlc0JpbmFyeSA9XG4gICAgICAgICAgIXRoaXMuc3VwcG9ydHNCaW5hcnkgJiYgc2VsZi50cmFuc3BvcnQuc3VwcG9ydHNCaW5hcnk7XG4gICAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgICB9XG4gICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cblxuXG4gICAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiBcInBpbmdcIiwgZGF0YTogXCJwcm9iZVwiIH1dKTtcbiAgICAgIHRyYW5zcG9ydC5vbmNlKFwicGFja2V0XCIsIGZ1bmN0aW9uKG1zZykge1xuICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgIGlmIChcInBvbmdcIiA9PT0gbXNnLnR5cGUgJiYgXCJwcm9iZVwiID09PSBtc2cuZGF0YSkge1xuXG5cbiAgICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgICAgc2VsZi5lbWl0KFwidXBncmFkaW5nXCIsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgaWYgKCF0cmFuc3BvcnQpIHJldHVybjtcbiAgICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cblxuXG4gICAgICAgICAgc2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoXCJjbG9zZWRcIiA9PT0gc2VsZi5yZWFkeVN0YXRlKSByZXR1cm47XG5cblxuXG4gICAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICAgIHNlbGYuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgICAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiBcInVwZ3JhZGVcIiB9XSk7XG4gICAgICAgICAgICBzZWxmLmVtaXQoXCJ1cGdyYWRlXCIsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgICAgc2VsZi51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYuZmx1c2goKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcblxuXG4gICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwicHJvYmUgZXJyb3JcIik7XG4gICAgICAgICAgZXJyLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuICAgICAgICAgIHNlbGYuZW1pdChcInVwZ3JhZGVFcnJvclwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcmVlemVUcmFuc3BvcnQoKSB7XG4gICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICAgIC8vIEFueSBjYWxsYmFjayBjYWxsZWQgYnkgdHJhbnNwb3J0IHNob3VsZCBiZSBpZ25vcmVkIHNpbmNlIG5vd1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgICAgY2xlYW51cCgpO1xuXG4gICAgICB0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGFueSBlcnJvciB0aGF0IGhhcHBlbnMgd2hpbGUgcHJvYmluZ1xuICAgIGZ1bmN0aW9uIG9uZXJyb3IoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcInByb2JlIGVycm9yOiBcIiArIGVycik7XG4gICAgICBlcnJvci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cblxuXG5cbiAgICAgIHNlbGYuZW1pdChcInVwZ3JhZGVFcnJvclwiLCBlcnJvcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSgpIHtcbiAgICAgIG9uZXJyb3IoXCJ0cmFuc3BvcnQgY2xvc2VkXCIpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICAgIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgICBvbmVycm9yKFwic29ja2V0IGNsb3NlZFwiKTtcbiAgICB9XG5cbiAgICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgdXBncmFkZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICAgIGZ1bmN0aW9uIG9udXBncmFkZSh0bykge1xuICAgICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9PSB0cmFuc3BvcnQubmFtZSkge1xuXG5cbiAgICAgICAgZnJlZXplVHJhbnNwb3J0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb24gdGhlIHRyYW5zcG9ydCBhbmQgb24gc2VsZlxuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJvcGVuXCIsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcInVwZ3JhZGluZ1wiLCBvbnVwZ3JhZGUpO1xuICAgIH1cblxuICAgIHRyYW5zcG9ydC5vbmNlKFwib3BlblwiLCBvblRyYW5zcG9ydE9wZW4pO1xuICAgIHRyYW5zcG9ydC5vbmNlKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgdHJhbnNwb3J0Lm9uY2UoXCJjbG9zZVwiLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICAgIHRoaXMub25jZShcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgIHRoaXMub25jZShcInVwZ3JhZGluZ1wiLCBvbnVwZ3JhZGUpO1xuXG4gICAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICAgKlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgb25PcGVuKCkge1xuXG5cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5cIjtcbiAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgICB0aGlzLmVtaXQoXCJvcGVuXCIpO1xuICAgIHRoaXMuZmx1c2goKTtcblxuICAgIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgICAvLyBsaXN0ZW5lciBhbHJlYWR5IGNsb3NlZCB0aGUgc29ja2V0XG4gICAgaWYgKFxuICAgICAgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSAmJlxuICAgICAgdGhpcy5vcHRzLnVwZ3JhZGUgJiZcbiAgICAgIHRoaXMudHJhbnNwb3J0LnBhdXNlXG4gICAgKSB7XG5cblxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgY29uc3QgbCA9IHRoaXMudXBncmFkZXMubGVuZ3RoO1xuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhIHBhY2tldC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvblBhY2tldChwYWNrZXQpIHtcbiAgICBpZiAoXG4gICAgICBcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICBcImNsb3NpbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlXG4gICAgKSB7XG5cblxuXG4gICAgICB0aGlzLmVtaXQoXCJwYWNrZXRcIiwgcGFja2V0KTtcblxuICAgICAgLy8gU29ja2V0IGlzIGxpdmUgLSBhbnkgcGFja2V0IGNvdW50c1xuICAgICAgdGhpcy5lbWl0KFwiaGVhcnRiZWF0XCIpO1xuXG4gICAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHBhY2tldC5kYXRhKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInBpbmdcIjpcbiAgICAgICAgICB0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKTtcbiAgICAgICAgICB0aGlzLnNlbmRQYWNrZXQoXCJwb25nXCIpO1xuICAgICAgICAgIHRoaXMuZW1pdChcInBvbmdcIik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwic2VydmVyIGVycm9yXCIpO1xuICAgICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJtZXNzYWdlXCIsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuXG5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kc2hha2Ugb2JqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25IYW5kc2hha2UoZGF0YSkge1xuICAgIHRoaXMuZW1pdChcImhhbmRzaGFrZVwiLCBkYXRhKTtcbiAgICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gICAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gICAgdGhpcy51cGdyYWRlcyA9IHRoaXMuZmlsdGVyVXBncmFkZXMoZGF0YS51cGdyYWRlcyk7XG4gICAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgICB0aGlzLm9uT3BlbigpO1xuICAgIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgICBpZiAoXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgdGhpcy5yZXNldFBpbmdUaW1lb3V0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbmQgcmVzZXRzIHBpbmcgdGltZW91dCB0aW1lciBiYXNlZCBvbiBzZXJ2ZXIgcGluZ3MuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgcmVzZXRQaW5nVGltZW91dCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMub25DbG9zZShcInBpbmcgdGltZW91dFwiKTtcbiAgICB9LCB0aGlzLnBpbmdJbnRlcnZhbCArIHRoaXMucGluZ1RpbWVvdXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBgZHJhaW5gIGV2ZW50XG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25EcmFpbigpIHtcbiAgICB0aGlzLndyaXRlQnVmZmVyLnNwbGljZSgwLCB0aGlzLnByZXZCdWZmZXJMZW4pO1xuXG4gICAgLy8gc2V0dGluZyBwcmV2QnVmZmVyTGVuID0gMCBpcyB2ZXJ5IGltcG9ydGFudFxuICAgIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAgIC8vIGFuZCBhIG5vbnplcm8gcHJldkJ1ZmZlckxlbiBjb3VsZCBjYXVzZSBwcm9ibGVtcyBvbiBgZHJhaW5gXG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICAgIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgdGhpcy5lbWl0KFwiZHJhaW5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmx1c2goKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBmbHVzaCgpIHtcbiAgICBpZiAoXG4gICAgICBcImNsb3NlZFwiICE9PSB0aGlzLnJlYWR5U3RhdGUgJiZcbiAgICAgIHRoaXMudHJhbnNwb3J0LndyaXRhYmxlICYmXG4gICAgICAhdGhpcy51cGdyYWRpbmcgJiZcbiAgICAgIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoXG4gICAgKSB7XG5cblxuICAgICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAgIC8vIHNwbGljZSB3cml0ZUJ1ZmZlciBhbmQgY2FsbGJhY2tCdWZmZXIgb24gYGRyYWluYFxuICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgICB0aGlzLmVtaXQoXCJmbHVzaFwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICAgKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIHdyaXRlKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgICB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIG1zZywgb3B0aW9ucywgZm4pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2VuZChtc2csIG9wdGlvbnMsIGZuKSB7XG4gICAgdGhpcy5zZW5kUGFja2V0KFwibWVzc2FnZVwiLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIHBhY2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHNlbmRQYWNrZXQodHlwZSwgZGF0YSwgb3B0aW9ucywgZm4pIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGF0YSkge1xuICAgICAgZm4gPSBkYXRhO1xuICAgICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgICAgZm4gPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gICAgY29uc3QgcGFja2V0ID0ge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgfTtcbiAgICB0aGlzLmVtaXQoXCJwYWNrZXRDcmVhdGVcIiwgcGFja2V0KTtcbiAgICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgICBpZiAoZm4pIHRoaXMub25jZShcImZsdXNoXCIsIGZuKTtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBjb25uZWN0aW9uLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zaW5nXCI7XG5cbiAgICAgIGlmICh0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgICB0aGlzLm9uY2UoXCJkcmFpblwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICBzZWxmLm9uQ2xvc2UoXCJmb3JjZWQgY2xvc2VcIik7XG5cblxuICAgICAgc2VsZi50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwQW5kQ2xvc2UoKSB7XG4gICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwidXBncmFkZVwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcInVwZ3JhZGVFcnJvclwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YWl0Rm9yVXBncmFkZSgpIHtcbiAgICAgIC8vIHdhaXQgZm9yIHVwZ3JhZGUgdG8gZmluaXNoIHNpbmNlIHdlIGNhbid0IHNlbmQgcGFja2V0cyB3aGlsZSBwYXVzaW5nIGEgdHJhbnNwb3J0XG4gICAgICBzZWxmLm9uY2UoXCJ1cGdyYWRlXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgICBzZWxmLm9uY2UoXCJ1cGdyYWRlRXJyb3JcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkVycm9yKGVycikge1xuXG5cbiAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICB0aGlzLm9uQ2xvc2UoXCJ0cmFuc3BvcnQgZXJyb3JcIiwgZXJyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgY2xvc2UuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25DbG9zZShyZWFzb24sIGRlc2MpIHtcbiAgICBpZiAoXG4gICAgICBcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICBcImNsb3NpbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlXG4gICAgKSB7XG5cblxuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIGNsZWFyIHRpbWVyc1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAgIC8vIHN0b3AgZXZlbnQgZnJvbSBmaXJpbmcgYWdhaW4gZm9yIHRyYW5zcG9ydFxuICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKFwiY2xvc2VcIik7XG5cbiAgICAgIC8vIGVuc3VyZSB0cmFuc3BvcnQgd29uJ3Qgc3RheSBvcGVuXG4gICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG5cbiAgICAgIC8vIHNldCByZWFkeSBzdGF0ZVxuICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcblxuICAgICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICAgIC8vIGVtaXQgY2xvc2UgZXZlbnRcbiAgICAgIHRoaXMuZW1pdChcImNsb3NlXCIsIHJlYXNvbiwgZGVzYyk7XG5cbiAgICAgIC8vIGNsZWFuIGJ1ZmZlcnMgYWZ0ZXIsIHNvIHVzZXJzIGNhbiBzdGlsbFxuICAgICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgICBzZWxmLndyaXRlQnVmZmVyID0gW107XG4gICAgICBzZWxmLnByZXZCdWZmZXJMZW4gPSAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKlxuICAgKi9cbiAgZmlsdGVyVXBncmFkZXModXBncmFkZXMpIHtcbiAgICBjb25zdCBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGogPSB1cGdyYWRlcy5sZW5ndGg7XG4gICAgZm9yICg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGlmICh+dGhpcy50cmFuc3BvcnRzLmluZGV4T2YodXBncmFkZXNbaV0pKVxuICAgICAgICBmaWx0ZXJlZFVwZ3JhZGVzLnB1c2godXBncmFkZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlcztcbiAgfVxufVxuXG5Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDsgLy8gdGhpcyBpcyBhbiBpbnRcblxuZnVuY3Rpb24gY2xvbmUob2JqKSB7XG4gIGNvbnN0IG8gPSB7fTtcbiAgZm9yIChsZXQgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTb2NrZXQ7XG4iLCIvKipcbiAqIOW+ruS/oeWwj+eoi+W6j3dlYnNvY2tldOWunueOsFxuICovXG5jb25zdCBUcmFuc3BvcnQgPSByZXF1aXJlKFwiLi4vdHJhbnNwb3J0XCIpO1xuY29uc3QgcGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCBwYXJzZXFzID0gcmVxdWlyZShcInBhcnNlcXNcIik7XG5jb25zdCB5ZWFzdCA9IHJlcXVpcmUoXCJ5ZWFzdFwiKTtcblxuXG5cbmNsYXNzIFdTIGV4dGVuZHMgVHJhbnNwb3J0IHtcbiAgLyoqXG4gICAqIFdlYlNvY2tldCB0cmFuc3BvcnQgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBhcGkge09iamVjdH0gY29ubmVjdGlvbiBvcHRpb25zXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG5cbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gIW9wdHMuZm9yY2VCYXNlNjQ7XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNwb3J0IG5hbWUuXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gXCJ3ZWJzb2NrZXRcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBzb2NrZXQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9PcGVuKCkge1xuICAgIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVyaSA9IHRoaXMudXJpKCk7XG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgIHVybDogdXJpXG4gICAgfTtcblxuICAgIGlmICh0aGlzLm9wdHMuYXV0aCkge1xuICAgICAgb3B0cy5kYXRhID0gdGhpcy5vcHRzLmF1dGg7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdHMucHJvdG9jb2xzKSB7XG4gICAgICBvcHRzLnByb3RvY29scyA9IHRoaXMub3B0cy5wcm90b2NvbHM7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLndzID0gd3guY29ubmVjdFNvY2tldChvcHRzKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMud3MuYmluYXJ5VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMud3Muc3VwcG9ydHMgJiYgdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkpIHtcbiAgICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuICAgICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ25vZGVidWZmZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgIH1cbiAgICAvLyB0aGlzLndzLmJpbmFyeVR5cGUgPSB0aGlzLnNvY2tldC5iaW5hcnlUeXBlIHx8IGRlZmF1bHRCaW5hcnlUeXBlO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHRoaXMud3Mub25PcGVuKGZ1bmN0aW9uICgpIHtcblxuXG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH0pO1xuICAgIHRoaXMud3Mub25FcnJvcihmdW5jdGlvbiAoZSkge1xuXG5cbiAgICAgIHNlbGYub25FcnJvcignd2Vic29ja2V0IGVycm9yJywgZSk7XG4gICAgfSk7XG4gICAgdGhpcy53cy5vbkNsb3NlKGZ1bmN0aW9uICgpIHtcblxuXG4gICAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgICB9KTtcbiAgICB0aGlzLndzLm9uTWVzc2FnZShmdW5jdGlvbiAoZXYpIHtcblxuXG4gICAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIHBhY2tldHMuXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgd3JpdGUocGFja2V0cykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAgIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gICAgLy8gbm8gbmVlZCBmb3IgZW5jb2RlUGF5bG9hZFxuICAgIGxldCB0b3RhbCA9IHBhY2tldHMubGVuZ3RoO1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBsID0gdG90YWw7XG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIChmdW5jdGlvbihwYWNrZXQpIHtcbiAgICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHNlbGYuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0XG4gICAgICAgICAgLy8gaGF2ZSBhIGNoYW5jZSBvZiBpbmZvcm1pbmcgdXMgYWJvdXQgaXQgeWV0LCBpbiB0aGF0IGNhc2Ugc2VuZCB3aWxsXG4gICAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VsZi53cy5zZW5kKHtkYXRhfSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuXG5cbiAgICAgICAgICB9XG4gICAgICAgICAgLS10b3RhbCB8fCBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkocGFja2V0c1tpXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIHNlbGYuZW1pdChcImZsdXNoXCIpO1xuXG4gICAgICAvLyBmYWtlIGRyYWluXG4gICAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5lbWl0KFwiZHJhaW5cIik7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gY2xvc2VcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkNsb3NlKCkge1xuICAgIC8vIFRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZS5jYWxsKHRoaXMpO1xuICAgIHN1cGVyLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgc29ja2V0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvQ2xvc2UoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgdXJpKCkge1xuICAgIGxldCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy5vcHRzLnNlY3VyZSA/IFwid3NzXCIgOiBcIndzXCI7XG4gICAgbGV0IHBvcnQgPSBcIlwiO1xuXG4gICAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdHMucG9ydCAmJlxuICAgICAgKChcIndzc1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICAgICAoXCJ3c1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gODApKVxuICAgICkge1xuICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5vcHRzLnBvcnQ7XG4gICAgfVxuXG4gICAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgICBpZiAodGhpcy5vcHRzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgICBxdWVyeVt0aGlzLm9wdHMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgICB9XG5cbiAgICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgIHF1ZXJ5LmI2NCA9IDE7XG4gICAgfVxuXG4gICAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgICBxdWVyeSA9IFwiP1wiICsgcXVlcnk7XG4gICAgfVxuXG4gICAgY29uc3QgaXB2NiA9IHRoaXMub3B0cy5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgcmV0dXJuIChcbiAgICAgIHNjaGVtYSArXG4gICAgICBcIjovL1wiICtcbiAgICAgIChpcHY2ID8gXCJbXCIgKyB0aGlzLm9wdHMuaG9zdG5hbWUgKyBcIl1cIiA6IHRoaXMub3B0cy5ob3N0bmFtZSkgK1xuICAgICAgcG9ydCArXG4gICAgICB0aGlzLm9wdHMucGF0aCArXG4gICAgICBxdWVyeVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGlzIHRyYW5zcG9ydCBpcyBhdmFpbGFibGUuXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjaGVjaygpIHtcbiAgICByZXR1cm4gKCdmdW5jdGlvbicgPT09IHR5cGVvZiB3eC5jb25uZWN0U29ja2V0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdTO1xuIiwiY29uc3QgeyBQQUNLRVRfVFlQRVMgfSA9IHJlcXVpcmUoXCIuL2NvbW1vbnNcIik7XG5cbmNvbnN0IHdpdGhOYXRpdmVCbG9iID1cbiAgdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAodHlwZW9mIEJsb2IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoQmxvYikgPT09IFwiW29iamVjdCBCbG9iQ29uc3RydWN0b3JdXCIpO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5cbi8vIEFycmF5QnVmZmVyLmlzVmlldyBtZXRob2QgaXMgbm90IGRlZmluZWQgaW4gSUUxMFxuY29uc3QgaXNWaWV3ID0gb2JqID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09IFwiZnVuY3Rpb25cIlxuICAgID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iailcbiAgICA6IG9iaiAmJiBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7XG59O1xuXG5jb25zdCBlbmNvZGVQYWNrZXQgPSAoeyB0eXBlLCBkYXRhIH0sIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykgPT4ge1xuICBpZiAod2l0aE5hdGl2ZUJsb2IgJiYgZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICBpZiAoc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuY29kZUJsb2JBc0Jhc2U2NChkYXRhLCBjYWxsYmFjayk7XG4gICAgfVxuICB9IGVsc2UgaWYgKFxuICAgIHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJlxuICAgIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KGRhdGEpKVxuICApIHtcbiAgICBpZiAoc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBkYXRhIDogZGF0YS5idWZmZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZW5jb2RlQmxvYkFzQmFzZTY0KG5ldyBCbG9iKFtkYXRhXSksIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbiAgLy8gcGxhaW4gc3RyaW5nXG4gIHJldHVybiBjYWxsYmFjayhQQUNLRVRfVFlQRVNbdHlwZV0gKyAoZGF0YSB8fCBcIlwiKSk7XG59O1xuXG5jb25zdCBlbmNvZGVCbG9iQXNCYXNlNjQgPSAoZGF0YSwgY2FsbGJhY2spID0+IHtcbiAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgY29udGVudCA9IGZpbGVSZWFkZXIucmVzdWx0LnNwbGl0KFwiLFwiKVsxXTtcbiAgICBjYWxsYmFjayhcImJcIiArIGNvbnRlbnQpO1xuICB9O1xuICByZXR1cm4gZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGRhdGEpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbmNvZGVQYWNrZXQ7XG4iLCJjb25zdCB7IFBBQ0tFVF9UWVBFU19SRVZFUlNFLCBFUlJPUl9QQUNLRVQgfSA9IHJlcXVpcmUoXCIuL2NvbW1vbnNcIik7XG5cbmNvbnN0IHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiO1xuXG5sZXQgYmFzZTY0ZGVjb2RlcjtcbmlmICh3aXRoTmF0aXZlQXJyYXlCdWZmZXIpIHtcbiAgYmFzZTY0ZGVjb2RlciA9IHJlcXVpcmUoXCJiYXNlNjQtYXJyYXlidWZmZXJcIik7XG59XG5cbmNvbnN0IGRlY29kZVBhY2tldCA9IChlbmNvZGVkUGFja2V0LCBiaW5hcnlUeXBlKSA9PiB7XG4gIGlmICh0eXBlb2YgZW5jb2RlZFBhY2tldCAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIm1lc3NhZ2VcIixcbiAgICAgIGRhdGE6IG1hcEJpbmFyeShlbmNvZGVkUGFja2V0LCBiaW5hcnlUeXBlKVxuICAgIH07XG4gIH1cbiAgY29uc3QgdHlwZSA9IGVuY29kZWRQYWNrZXQuY2hhckF0KDApO1xuICBpZiAodHlwZSA9PT0gXCJiXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJtZXNzYWdlXCIsXG4gICAgICBkYXRhOiBkZWNvZGVCYXNlNjRQYWNrZXQoZW5jb2RlZFBhY2tldC5zdWJzdHJpbmcoMSksIGJpbmFyeVR5cGUpXG4gICAgfTtcbiAgfVxuICBjb25zdCBwYWNrZXRUeXBlID0gUEFDS0VUX1RZUEVTX1JFVkVSU0VbdHlwZV07XG4gIGlmICghcGFja2V0VHlwZSkge1xuICAgIHJldHVybiBFUlJPUl9QQUNLRVQ7XG4gIH1cbiAgcmV0dXJuIGVuY29kZWRQYWNrZXQubGVuZ3RoID4gMVxuICAgID8ge1xuICAgICAgICB0eXBlOiBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXSxcbiAgICAgICAgZGF0YTogZW5jb2RlZFBhY2tldC5zdWJzdHJpbmcoMSlcbiAgICAgIH1cbiAgICA6IHtcbiAgICAgICAgdHlwZTogUEFDS0VUX1RZUEVTX1JFVkVSU0VbdHlwZV1cbiAgICAgIH07XG59O1xuXG5jb25zdCBkZWNvZGVCYXNlNjRQYWNrZXQgPSAoZGF0YSwgYmluYXJ5VHlwZSkgPT4ge1xuICBpZiAoYmFzZTY0ZGVjb2Rlcikge1xuICAgIGNvbnN0IGRlY29kZWQgPSBiYXNlNjRkZWNvZGVyLmRlY29kZShkYXRhKTtcbiAgICByZXR1cm4gbWFwQmluYXJ5KGRlY29kZWQsIGJpbmFyeVR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7IGJhc2U2NDogdHJ1ZSwgZGF0YSB9OyAvLyBmYWxsYmFjayBmb3Igb2xkIGJyb3dzZXJzXG4gIH1cbn07XG5cbmNvbnN0IG1hcEJpbmFyeSA9IChkYXRhLCBiaW5hcnlUeXBlKSA9PiB7XG4gIHN3aXRjaCAoYmluYXJ5VHlwZSkge1xuICAgIGNhc2UgXCJibG9iXCI6XG4gICAgICByZXR1cm4gZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IEJsb2IoW2RhdGFdKSA6IGRhdGE7XG4gICAgY2FzZSBcImFycmF5YnVmZmVyXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBkYXRhOyAvLyBhc3N1bWluZyB0aGUgZGF0YSBpcyBhbHJlYWR5IGFuIEFycmF5QnVmZmVyXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlUGFja2V0O1xuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKGNoYXJzKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaV0pO1xuICAgICAgZW5jb2RlZDIgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpKzFdKTtcbiAgICAgIGVuY29kZWQzID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaSsyXSk7XG4gICAgICBlbmNvZGVkNCA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2krM10pO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKVxuICAsIGxlbmd0aCA9IDY0XG4gICwgbWFwID0ge31cbiAgLCBzZWVkID0gMFxuICAsIGkgPSAwXG4gICwgcHJldjtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICB2YXIgZW5jb2RlZCA9ICcnO1xuXG4gIGRvIHtcbiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICB9IHdoaWxlIChudW0gPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICB2YXIgZGVjb2RlZCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8qKlxuICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllYXN0KCkge1xuICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcblxuICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7XG59XG5cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLlxuLy9cbnllYXN0LmVuY29kZSA9IGVuY29kZTtcbnllYXN0LmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XG4iLCJleHBvcnRzLmVuY29kZSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG5leHBvcnRzLmRlY29kZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSh2aWV3LCBvZmZzZXQsIHN0cikge1xuICB2YXIgYyA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3RyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIDB4YzAgfCAoYyA+PiA2KSk7XG4gICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAweDgwIHwgKGMgJiAweDNmKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGMgPCAweGQ4MDAgfHwgYyA+PSAweGUwMDApIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIDB4ZTAgfCAoYyA+PiAxMikpO1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgMHg4MCB8IChjID4+IDYpICYgMHgzZik7XG4gICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAweDgwIHwgKGMgJiAweDNmKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaSsrO1xuICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzZmYpIDw8IDEwKSB8IChzdHIuY2hhckNvZGVBdChpKSAmIDB4M2ZmKSk7XG4gICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAweGYwIHwgKGMgPj4gMTgpKTtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIDB4ODAgfCAoYyA+PiAxMikgJiAweDNmKTtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIDB4ODAgfCAoYyA+PiA2KSAmIDB4M2YpO1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgMHg4MCB8IChjICYgMHgzZikpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4TGVuZ3RoKHN0cikge1xuICB2YXIgYyA9IDAsIGxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3RyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgIGxlbmd0aCArPSAxO1xuICAgIH1cbiAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgIGxlbmd0aCArPSAyO1xuICAgIH1cbiAgICBlbHNlIGlmIChjIDwgMHhkODAwIHx8IGMgPj0gMHhlMDAwKSB7XG4gICAgICBsZW5ndGggKz0gMztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpKys7XG4gICAgICBsZW5ndGggKz0gNDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxlbmd0aDtcbn1cblxuZnVuY3Rpb24gX2VuY29kZShieXRlcywgZGVmZXJzLCB2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSwgaSA9IDAsIGwgPSAwLCBoaSA9IDAsIGxvID0gMCwgbGVuZ3RoID0gMCwgc2l6ZSA9IDA7XG5cbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgbGVuZ3RoID0gdXRmOExlbmd0aCh2YWx1ZSk7XG5cbiAgICAvLyBmaXhzdHJcbiAgICBpZiAobGVuZ3RoIDwgMHgyMCkge1xuICAgICAgYnl0ZXMucHVzaChsZW5ndGggfCAweGEwKTtcbiAgICAgIHNpemUgPSAxO1xuICAgIH1cbiAgICAvLyBzdHIgOFxuICAgIGVsc2UgaWYgKGxlbmd0aCA8IDB4MTAwKSB7XG4gICAgICBieXRlcy5wdXNoKDB4ZDksIGxlbmd0aCk7XG4gICAgICBzaXplID0gMjtcbiAgICB9XG4gICAgLy8gc3RyIDE2XG4gICAgZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDAwMCkge1xuICAgICAgYnl0ZXMucHVzaCgweGRhLCBsZW5ndGggPj4gOCwgbGVuZ3RoKTtcbiAgICAgIHNpemUgPSAzO1xuICAgIH1cbiAgICAvLyBzdHIgMzJcbiAgICBlbHNlIGlmIChsZW5ndGggPCAweDEwMDAwMDAwMCkge1xuICAgICAgYnl0ZXMucHVzaCgweGRiLCBsZW5ndGggPj4gMjQsIGxlbmd0aCA+PiAxNiwgbGVuZ3RoID4+IDgsIGxlbmd0aCk7XG4gICAgICBzaXplID0gNTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgdG9vIGxvbmcnKTtcbiAgICB9XG4gICAgZGVmZXJzLnB1c2goeyBfc3RyOiB2YWx1ZSwgX2xlbmd0aDogbGVuZ3RoLCBfb2Zmc2V0OiBieXRlcy5sZW5ndGggfSk7XG4gICAgcmV0dXJuIHNpemUgKyBsZW5ndGg7XG4gIH1cbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gVE9ETzogZW5jb2RlIHRvIGZsb2F0IDMyP1xuXG4gICAgLy8gZmxvYXQgNjRcbiAgICBpZiAoTWF0aC5mbG9vcih2YWx1ZSkgIT09IHZhbHVlIHx8ICFpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgIGJ5dGVzLnB1c2goMHhjYik7XG4gICAgICBkZWZlcnMucHVzaCh7IF9mbG9hdDogdmFsdWUsIF9sZW5ndGg6IDgsIF9vZmZzZXQ6IGJ5dGVzLmxlbmd0aCB9KTtcbiAgICAgIHJldHVybiA5O1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA+PSAwKSB7XG4gICAgICAvLyBwb3NpdGl2ZSBmaXhudW1cbiAgICAgIGlmICh2YWx1ZSA8IDB4ODApIHtcbiAgICAgICAgYnl0ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgLy8gdWludCA4XG4gICAgICBpZiAodmFsdWUgPCAweDEwMCkge1xuICAgICAgICBieXRlcy5wdXNoKDB4Y2MsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICB9XG4gICAgICAvLyB1aW50IDE2XG4gICAgICBpZiAodmFsdWUgPCAweDEwMDAwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMHhjZCwgdmFsdWUgPj4gOCwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gMztcbiAgICAgIH1cbiAgICAgIC8vIHVpbnQgMzJcbiAgICAgIGlmICh2YWx1ZSA8IDB4MTAwMDAwMDAwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMHhjZSwgdmFsdWUgPj4gMjQsIHZhbHVlID4+IDE2LCB2YWx1ZSA+PiA4LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiA1O1xuICAgICAgfVxuICAgICAgLy8gdWludCA2NFxuICAgICAgaGkgPSAodmFsdWUgLyBNYXRoLnBvdygyLCAzMikpID4+IDA7XG4gICAgICBsbyA9IHZhbHVlID4+PiAwO1xuICAgICAgYnl0ZXMucHVzaCgweGNmLCBoaSA+PiAyNCwgaGkgPj4gMTYsIGhpID4+IDgsIGhpLCBsbyA+PiAyNCwgbG8gPj4gMTYsIGxvID4+IDgsIGxvKTtcbiAgICAgIHJldHVybiA5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBuZWdhdGl2ZSBmaXhudW1cbiAgICAgIGlmICh2YWx1ZSA+PSAtMHgyMCkge1xuICAgICAgICBieXRlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICAvLyBpbnQgOFxuICAgICAgaWYgKHZhbHVlID49IC0weDgwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMHhkMCwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gMjtcbiAgICAgIH1cbiAgICAgIC8vIGludCAxNlxuICAgICAgaWYgKHZhbHVlID49IC0weDgwMDApIHtcbiAgICAgICAgYnl0ZXMucHVzaCgweGQxLCB2YWx1ZSA+PiA4LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiAzO1xuICAgICAgfVxuICAgICAgLy8gaW50IDMyXG4gICAgICBpZiAodmFsdWUgPj0gLTB4ODAwMDAwMDApIHtcbiAgICAgICAgYnl0ZXMucHVzaCgweGQyLCB2YWx1ZSA+PiAyNCwgdmFsdWUgPj4gMTYsIHZhbHVlID4+IDgsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIDU7XG4gICAgICB9XG4gICAgICAvLyBpbnQgNjRcbiAgICAgIGhpID0gTWF0aC5mbG9vcih2YWx1ZSAvIE1hdGgucG93KDIsIDMyKSk7XG4gICAgICBsbyA9IHZhbHVlID4+PiAwO1xuICAgICAgYnl0ZXMucHVzaCgweGQzLCBoaSA+PiAyNCwgaGkgPj4gMTYsIGhpID4+IDgsIGhpLCBsbyA+PiAyNCwgbG8gPj4gMTYsIGxvID4+IDgsIGxvKTtcbiAgICAgIHJldHVybiA5O1xuICAgIH1cbiAgfVxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBuaWxcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIGJ5dGVzLnB1c2goMHhjMCk7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcblxuICAgICAgLy8gZml4YXJyYXlcbiAgICAgIGlmIChsZW5ndGggPCAweDEwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2gobGVuZ3RoIHwgMHg5MCk7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfVxuICAgICAgLy8gYXJyYXkgMTZcbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA8IDB4MTAwMDApIHtcbiAgICAgICAgYnl0ZXMucHVzaCgweGRjLCBsZW5ndGggPj4gOCwgbGVuZ3RoKTtcbiAgICAgICAgc2l6ZSA9IDM7XG4gICAgICB9XG4gICAgICAvLyBhcnJheSAzMlxuICAgICAgZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgICAgYnl0ZXMucHVzaCgweGRkLCBsZW5ndGggPj4gMjQsIGxlbmd0aCA+PiAxNiwgbGVuZ3RoID4+IDgsIGxlbmd0aCk7XG4gICAgICAgIHNpemUgPSA1O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcnJheSB0b28gbGFyZ2UnKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBzaXplICs9IF9lbmNvZGUoYnl0ZXMsIGRlZmVycywgdmFsdWVbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuXG4gICAgLy8gZml4ZXh0IDggLyBEYXRlXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgdmFyIHRpbWUgPSB2YWx1ZS5nZXRUaW1lKCk7XG4gICAgICBoaSA9IE1hdGguZmxvb3IodGltZSAvIE1hdGgucG93KDIsIDMyKSk7XG4gICAgICBsbyA9IHRpbWUgPj4+IDA7XG4gICAgICBieXRlcy5wdXNoKDB4ZDcsIDAsIGhpID4+IDI0LCBoaSA+PiAxNiwgaGkgPj4gOCwgaGksIGxvID4+IDI0LCBsbyA+PiAxNiwgbG8gPj4gOCwgbG8pO1xuICAgICAgcmV0dXJuIDEwO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICBsZW5ndGggPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuXG4gICAgICAvLyBiaW4gOFxuICAgICAgaWYgKGxlbmd0aCA8IDB4MTAwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMHhjNCwgbGVuZ3RoKTtcbiAgICAgICAgc2l6ZSA9IDI7XG4gICAgICB9IGVsc2VcbiAgICAgIC8vIGJpbiAxNlxuICAgICAgaWYgKGxlbmd0aCA8IDB4MTAwMDApIHtcbiAgICAgICAgYnl0ZXMucHVzaCgweGM1LCBsZW5ndGggPj4gOCwgbGVuZ3RoKTtcbiAgICAgICAgc2l6ZSA9IDM7XG4gICAgICB9IGVsc2VcbiAgICAgIC8vIGJpbiAzMlxuICAgICAgaWYgKGxlbmd0aCA8IDB4MTAwMDAwMDAwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMHhjNiwgbGVuZ3RoID4+IDI0LCBsZW5ndGggPj4gMTYsIGxlbmd0aCA+PiA4LCBsZW5ndGgpO1xuICAgICAgICBzaXplID0gNTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQnVmZmVyIHRvbyBsYXJnZScpO1xuICAgICAgfVxuICAgICAgZGVmZXJzLnB1c2goeyBfYmluOiB2YWx1ZSwgX2xlbmd0aDogbGVuZ3RoLCBfb2Zmc2V0OiBieXRlcy5sZW5ndGggfSk7XG4gICAgICByZXR1cm4gc2l6ZSArIGxlbmd0aDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIF9lbmNvZGUoYnl0ZXMsIGRlZmVycywgdmFsdWUudG9KU09OKCkpO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gW10sIGtleSA9ICcnO1xuXG4gICAgdmFyIGFsbEtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgZm9yIChpID0gMCwgbCA9IGFsbEtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBrZXkgPSBhbGxLZXlzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtrZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcblxuICAgIC8vIGZpeG1hcFxuICAgIGlmIChsZW5ndGggPCAweDEwKSB7XG4gICAgICBieXRlcy5wdXNoKGxlbmd0aCB8IDB4ODApO1xuICAgICAgc2l6ZSA9IDE7XG4gICAgfVxuICAgIC8vIG1hcCAxNlxuICAgIGVsc2UgaWYgKGxlbmd0aCA8IDB4MTAwMDApIHtcbiAgICAgIGJ5dGVzLnB1c2goMHhkZSwgbGVuZ3RoID4+IDgsIGxlbmd0aCk7XG4gICAgICBzaXplID0gMztcbiAgICB9XG4gICAgLy8gbWFwIDMyXG4gICAgZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgIGJ5dGVzLnB1c2goMHhkZiwgbGVuZ3RoID4+IDI0LCBsZW5ndGggPj4gMTYsIGxlbmd0aCA+PiA4LCBsZW5ndGgpO1xuICAgICAgc2l6ZSA9IDU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT2JqZWN0IHRvbyBsYXJnZScpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIHNpemUgKz0gX2VuY29kZShieXRlcywgZGVmZXJzLCBrZXkpO1xuICAgICAgc2l6ZSArPSBfZW5jb2RlKGJ5dGVzLCBkZWZlcnMsIHZhbHVlW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuICAvLyBmYWxzZS90cnVlXG4gIGlmICh0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICBieXRlcy5wdXNoKHZhbHVlID8gMHhjMyA6IDB4YzIpO1xuICAgIHJldHVybiAxO1xuICB9XG4gIC8vIGZpeGV4dCAxIC8gdW5kZWZpbmVkXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgIGJ5dGVzLnB1c2goMHhkNCwgMCwgMCk7XG4gICAgcmV0dXJuIDM7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZW5jb2RlJyk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSkge1xuICB2YXIgYnl0ZXMgPSBbXTtcbiAgdmFyIGRlZmVycyA9IFtdO1xuICB2YXIgc2l6ZSA9IF9lbmNvZGUoYnl0ZXMsIGRlZmVycywgdmFsdWUpO1xuICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKHNpemUpO1xuICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhidWYpO1xuXG4gIHZhciBkZWZlckluZGV4ID0gMDtcbiAgdmFyIGRlZmVyV3JpdHRlbiA9IDA7XG4gIHZhciBuZXh0T2Zmc2V0ID0gLTE7XG4gIGlmIChkZWZlcnMubGVuZ3RoID4gMCkge1xuICAgIG5leHRPZmZzZXQgPSBkZWZlcnNbMF0uX29mZnNldDtcbiAgfVxuXG4gIHZhciBkZWZlciwgZGVmZXJMZW5ndGggPSAwLCBvZmZzZXQgPSAwO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGJ5dGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZpZXcuc2V0VWludDgoZGVmZXJXcml0dGVuICsgaSwgYnl0ZXNbaV0pO1xuICAgIGlmIChpICsgMSAhPT0gbmV4dE9mZnNldCkgeyBjb250aW51ZTsgfVxuICAgIGRlZmVyID0gZGVmZXJzW2RlZmVySW5kZXhdO1xuICAgIGRlZmVyTGVuZ3RoID0gZGVmZXIuX2xlbmd0aDtcbiAgICBvZmZzZXQgPSBkZWZlcldyaXR0ZW4gKyBuZXh0T2Zmc2V0O1xuICAgIGlmIChkZWZlci5fYmluKSB7XG4gICAgICB2YXIgYmluID0gbmV3IFVpbnQ4QXJyYXkoZGVmZXIuX2Jpbik7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRlZmVyTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQgKyBqLCBiaW5bal0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGVmZXIuX3N0cikge1xuICAgICAgdXRmOFdyaXRlKHZpZXcsIG9mZnNldCwgZGVmZXIuX3N0cik7XG4gICAgfSBlbHNlIGlmIChkZWZlci5fZmxvYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmlldy5zZXRGbG9hdDY0KG9mZnNldCwgZGVmZXIuX2Zsb2F0KTtcbiAgICB9XG4gICAgZGVmZXJJbmRleCsrO1xuICAgIGRlZmVyV3JpdHRlbiArPSBkZWZlckxlbmd0aDtcbiAgICBpZiAoZGVmZXJzW2RlZmVySW5kZXhdKSB7XG4gICAgICBuZXh0T2Zmc2V0ID0gZGVmZXJzW2RlZmVySW5kZXhdLl9vZmZzZXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBidWY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW5jb2RlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBEZWNvZGVyKGJ1ZmZlcikge1xuICB0aGlzLl9vZmZzZXQgPSAwO1xuICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICB0aGlzLl9idWZmZXIgPSBidWZmZXI7XG4gICAgdGhpcy5fdmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLl9idWZmZXIpO1xuICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhidWZmZXIpKSB7XG4gICAgdGhpcy5fYnVmZmVyID0gYnVmZmVyLmJ1ZmZlcjtcbiAgICB0aGlzLl92aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuX2J1ZmZlciwgYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4UmVhZCh2aWV3LCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgc3RyaW5nID0gJycsIGNociA9IDA7XG4gIGZvciAodmFyIGkgPSBvZmZzZXQsIGVuZCA9IG9mZnNldCArIGxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgdmFyIGJ5dGUgPSB2aWV3LmdldFVpbnQ4KGkpO1xuICAgIGlmICgoYnl0ZSAmIDB4ODApID09PSAweDAwKSB7XG4gICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoKGJ5dGUgJiAweGUwKSA9PT0gMHhjMCkge1xuICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICAgICgoYnl0ZSAmIDB4MWYpIDw8IDYpIHxcbiAgICAgICAgKHZpZXcuZ2V0VWludDgoKytpKSAmIDB4M2YpXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICgoYnl0ZSAmIDB4ZjApID09PSAweGUwKSB7XG4gICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShcbiAgICAgICAgKChieXRlICYgMHgwZikgPDwgMTIpIHxcbiAgICAgICAgKCh2aWV3LmdldFVpbnQ4KCsraSkgJiAweDNmKSA8PCA2KSB8XG4gICAgICAgICgodmlldy5nZXRVaW50OCgrK2kpICYgMHgzZikgPDwgMClcbiAgICAgICk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKChieXRlICYgMHhmOCkgPT09IDB4ZjApIHtcbiAgICAgIGNociA9ICgoYnl0ZSAmIDB4MDcpIDw8IDE4KSB8XG4gICAgICAgICgodmlldy5nZXRVaW50OCgrK2kpICYgMHgzZikgPDwgMTIpIHxcbiAgICAgICAgKCh2aWV3LmdldFVpbnQ4KCsraSkgJiAweDNmKSA8PCA2KSB8XG4gICAgICAgICgodmlldy5nZXRVaW50OCgrK2kpICYgMHgzZikgPDwgMCk7XG4gICAgICBpZiAoY2hyID49IDB4MDEwMDAwKSB7IC8vIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgIGNociAtPSAweDAxMDAwMDtcbiAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGNociA+Pj4gMTApICsgMHhEODAwLCAoY2hyICYgMHgzRkYpICsgMHhEQzAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocik7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGUgJyArIGJ5dGUudG9TdHJpbmcoMTYpKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nO1xufVxuXG5EZWNvZGVyLnByb3RvdHlwZS5fYXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gIHZhciB2YWx1ZSA9IG5ldyBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFsdWVbaV0gPSB0aGlzLl9wYXJzZSgpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbkRlY29kZXIucHJvdG90eXBlLl9tYXAgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gIHZhciBrZXkgPSAnJywgdmFsdWUgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHRoaXMuX3BhcnNlKCk7XG4gICAgdmFsdWVba2V5XSA9IHRoaXMuX3BhcnNlKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuRGVjb2Rlci5wcm90b3R5cGUuX3N0ciA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgdmFyIHZhbHVlID0gdXRmOFJlYWQodGhpcy5fdmlldywgdGhpcy5fb2Zmc2V0LCBsZW5ndGgpO1xuICB0aGlzLl9vZmZzZXQgKz0gbGVuZ3RoO1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG5EZWNvZGVyLnByb3RvdHlwZS5fYmluID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICB2YXIgdmFsdWUgPSB0aGlzLl9idWZmZXIuc2xpY2UodGhpcy5fb2Zmc2V0LCB0aGlzLl9vZmZzZXQgKyBsZW5ndGgpO1xuICB0aGlzLl9vZmZzZXQgKz0gbGVuZ3RoO1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG5EZWNvZGVyLnByb3RvdHlwZS5fcGFyc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcmVmaXggPSB0aGlzLl92aWV3LmdldFVpbnQ4KHRoaXMuX29mZnNldCsrKTtcbiAgdmFyIHZhbHVlLCBsZW5ndGggPSAwLCB0eXBlID0gMCwgaGkgPSAwLCBsbyA9IDA7XG5cbiAgaWYgKHByZWZpeCA8IDB4YzApIHtcbiAgICAvLyBwb3NpdGl2ZSBmaXhpbnRcbiAgICBpZiAocHJlZml4IDwgMHg4MCkge1xuICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG4gICAgLy8gZml4bWFwXG4gICAgaWYgKHByZWZpeCA8IDB4OTApIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXAocHJlZml4ICYgMHgwZik7XG4gICAgfVxuICAgIC8vIGZpeGFycmF5XG4gICAgaWYgKHByZWZpeCA8IDB4YTApIHtcbiAgICAgIHJldHVybiB0aGlzLl9hcnJheShwcmVmaXggJiAweDBmKTtcbiAgICB9XG4gICAgLy8gZml4c3RyXG4gICAgcmV0dXJuIHRoaXMuX3N0cihwcmVmaXggJiAweDFmKTtcbiAgfVxuXG4gIC8vIG5lZ2F0aXZlIGZpeGludFxuICBpZiAocHJlZml4ID4gMHhkZikge1xuICAgIHJldHVybiAoMHhmZiAtIHByZWZpeCArIDEpICogLTE7XG4gIH1cblxuICBzd2l0Y2ggKHByZWZpeCkge1xuICAgIC8vIG5pbFxuICAgIGNhc2UgMHhjMDpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIGZhbHNlXG4gICAgY2FzZSAweGMyOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIHRydWVcbiAgICBjYXNlIDB4YzM6XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIC8vIGJpblxuICAgIGNhc2UgMHhjNDpcbiAgICAgIGxlbmd0aCA9IHRoaXMuX3ZpZXcuZ2V0VWludDgodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX2JpbihsZW5ndGgpO1xuICAgIGNhc2UgMHhjNTpcbiAgICAgIGxlbmd0aCA9IHRoaXMuX3ZpZXcuZ2V0VWludDE2KHRoaXMuX29mZnNldCk7XG4gICAgICB0aGlzLl9vZmZzZXQgKz0gMjtcbiAgICAgIHJldHVybiB0aGlzLl9iaW4obGVuZ3RoKTtcbiAgICBjYXNlIDB4YzY6XG4gICAgICBsZW5ndGggPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDQ7XG4gICAgICByZXR1cm4gdGhpcy5fYmluKGxlbmd0aCk7XG5cbiAgICAvLyBleHRcbiAgICBjYXNlIDB4Yzc6XG4gICAgICBsZW5ndGggPSB0aGlzLl92aWV3LmdldFVpbnQ4KHRoaXMuX29mZnNldCk7XG4gICAgICB0eXBlID0gdGhpcy5fdmlldy5nZXRJbnQ4KHRoaXMuX29mZnNldCArIDEpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDI7XG4gICAgICByZXR1cm4gW3R5cGUsIHRoaXMuX2JpbihsZW5ndGgpXTtcbiAgICBjYXNlIDB4Yzg6XG4gICAgICBsZW5ndGggPSB0aGlzLl92aWV3LmdldFVpbnQxNih0aGlzLl9vZmZzZXQpO1xuICAgICAgdHlwZSA9IHRoaXMuX3ZpZXcuZ2V0SW50OCh0aGlzLl9vZmZzZXQgKyAyKTtcbiAgICAgIHRoaXMuX29mZnNldCArPSAzO1xuICAgICAgcmV0dXJuIFt0eXBlLCB0aGlzLl9iaW4obGVuZ3RoKV07XG4gICAgY2FzZSAweGM5OlxuICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHR5cGUgPSB0aGlzLl92aWV3LmdldEludDgodGhpcy5fb2Zmc2V0ICsgNCk7XG4gICAgICB0aGlzLl9vZmZzZXQgKz0gNTtcbiAgICAgIHJldHVybiBbdHlwZSwgdGhpcy5fYmluKGxlbmd0aCldO1xuXG4gICAgLy8gZmxvYXRcbiAgICBjYXNlIDB4Y2E6XG4gICAgICB2YWx1ZSA9IHRoaXMuX3ZpZXcuZ2V0RmxvYXQzMih0aGlzLl9vZmZzZXQpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDQ7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgY2FzZSAweGNiOlxuICAgICAgdmFsdWUgPSB0aGlzLl92aWV3LmdldEZsb2F0NjQodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSA4O1xuICAgICAgcmV0dXJuIHZhbHVlO1xuXG4gICAgLy8gdWludFxuICAgIGNhc2UgMHhjYzpcbiAgICAgIHZhbHVlID0gdGhpcy5fdmlldy5nZXRVaW50OCh0aGlzLl9vZmZzZXQpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDE7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgY2FzZSAweGNkOlxuICAgICAgdmFsdWUgPSB0aGlzLl92aWV3LmdldFVpbnQxNih0aGlzLl9vZmZzZXQpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDI7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgY2FzZSAweGNlOlxuICAgICAgdmFsdWUgPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDQ7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgY2FzZSAweGNmOlxuICAgICAgaGkgPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQpICogTWF0aC5wb3coMiwgMzIpO1xuICAgICAgbG8gPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQgKyA0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSA4O1xuICAgICAgcmV0dXJuIGhpICsgbG87XG5cbiAgICAvLyBpbnRcbiAgICBjYXNlIDB4ZDA6XG4gICAgICB2YWx1ZSA9IHRoaXMuX3ZpZXcuZ2V0SW50OCh0aGlzLl9vZmZzZXQpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDE7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgY2FzZSAweGQxOlxuICAgICAgdmFsdWUgPSB0aGlzLl92aWV3LmdldEludDE2KHRoaXMuX29mZnNldCk7XG4gICAgICB0aGlzLl9vZmZzZXQgKz0gMjtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBjYXNlIDB4ZDI6XG4gICAgICB2YWx1ZSA9IHRoaXMuX3ZpZXcuZ2V0SW50MzIodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSA0O1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGNhc2UgMHhkMzpcbiAgICAgIGhpID0gdGhpcy5fdmlldy5nZXRJbnQzMih0aGlzLl9vZmZzZXQpICogTWF0aC5wb3coMiwgMzIpO1xuICAgICAgbG8gPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQgKyA0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSA4O1xuICAgICAgcmV0dXJuIGhpICsgbG87XG5cbiAgICAvLyBmaXhleHRcbiAgICBjYXNlIDB4ZDQ6XG4gICAgICB0eXBlID0gdGhpcy5fdmlldy5nZXRJbnQ4KHRoaXMuX29mZnNldCk7XG4gICAgICB0aGlzLl9vZmZzZXQgKz0gMTtcbiAgICAgIGlmICh0eXBlID09PSAweDAwKSB7XG4gICAgICAgIHRoaXMuX29mZnNldCArPSAxO1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFt0eXBlLCB0aGlzLl9iaW4oMSldO1xuICAgIGNhc2UgMHhkNTpcbiAgICAgIHR5cGUgPSB0aGlzLl92aWV3LmdldEludDgodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSAxO1xuICAgICAgcmV0dXJuIFt0eXBlLCB0aGlzLl9iaW4oMildO1xuICAgIGNhc2UgMHhkNjpcbiAgICAgIHR5cGUgPSB0aGlzLl92aWV3LmdldEludDgodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSAxO1xuICAgICAgcmV0dXJuIFt0eXBlLCB0aGlzLl9iaW4oNCldO1xuICAgIGNhc2UgMHhkNzpcbiAgICAgIHR5cGUgPSB0aGlzLl92aWV3LmdldEludDgodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSAxO1xuICAgICAgaWYgKHR5cGUgPT09IDB4MDApIHtcbiAgICAgICAgaGkgPSB0aGlzLl92aWV3LmdldEludDMyKHRoaXMuX29mZnNldCkgKiBNYXRoLnBvdygyLCAzMik7XG4gICAgICAgIGxvID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0ICsgNCk7XG4gICAgICAgIHRoaXMuX29mZnNldCArPSA4O1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoaGkgKyBsbyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3R5cGUsIHRoaXMuX2Jpbig4KV07XG4gICAgY2FzZSAweGQ4OlxuICAgICAgdHlwZSA9IHRoaXMuX3ZpZXcuZ2V0SW50OCh0aGlzLl9vZmZzZXQpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDE7XG4gICAgICByZXR1cm4gW3R5cGUsIHRoaXMuX2JpbigxNildO1xuXG4gICAgLy8gc3RyXG4gICAgY2FzZSAweGQ5OlxuICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50OCh0aGlzLl9vZmZzZXQpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDE7XG4gICAgICByZXR1cm4gdGhpcy5fc3RyKGxlbmd0aCk7XG4gICAgY2FzZSAweGRhOlxuICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50MTYodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSAyO1xuICAgICAgcmV0dXJuIHRoaXMuX3N0cihsZW5ndGgpO1xuICAgIGNhc2UgMHhkYjpcbiAgICAgIGxlbmd0aCA9IHRoaXMuX3ZpZXcuZ2V0VWludDMyKHRoaXMuX29mZnNldCk7XG4gICAgICB0aGlzLl9vZmZzZXQgKz0gNDtcbiAgICAgIHJldHVybiB0aGlzLl9zdHIobGVuZ3RoKTtcblxuICAgIC8vIGFycmF5XG4gICAgY2FzZSAweGRjOlxuICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50MTYodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSAyO1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5KGxlbmd0aCk7XG4gICAgY2FzZSAweGRkOlxuICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSA0O1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5KGxlbmd0aCk7XG5cbiAgICAvLyBtYXBcbiAgICBjYXNlIDB4ZGU6XG4gICAgICBsZW5ndGggPSB0aGlzLl92aWV3LmdldFVpbnQxNih0aGlzLl9vZmZzZXQpO1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IDI7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwKGxlbmd0aCk7XG4gICAgY2FzZSAweGRmOlxuICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0KTtcbiAgICAgIHRoaXMuX29mZnNldCArPSA0O1xuICAgICAgcmV0dXJuIHRoaXMuX21hcChsZW5ndGgpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgcGFyc2UnKTtcbn07XG5cbmZ1bmN0aW9uIGRlY29kZShidWZmZXIpIHtcbiAgdmFyIGRlY29kZXIgPSBuZXcgRGVjb2RlcihidWZmZXIpO1xuICB2YXIgdmFsdWUgPSBkZWNvZGVyLl9wYXJzZSgpO1xuICBpZiAoZGVjb2Rlci5fb2Zmc2V0ICE9PSBidWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcigoYnVmZmVyLmJ5dGVMZW5ndGggLSBkZWNvZGVyLl9vZmZzZXQpICsgJyB0cmFpbGluZyBieXRlcycpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGU7XG4iLCJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=